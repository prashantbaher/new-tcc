var store = [{
        "title": "Solidworks C++ API",
        "excerpt":"   Disclaimer, this page is only for my learning purpose!!!    Nothing special I have to say or write for this Solidworks C++ API tutorials.   I will start posting on Solidworks C++ API tutorials along with Solidworks VBA tutorials on regular basis.   For whom this section might be interested?           Those who want to learn Solidworks C++ API            Student doing Masters in CAD/CAM            Casual programmers like myself who want to apply what is learnt!       One thing is sure, I am not going to explain in very detail because I am more of a .NET developer not a C++ Developer.   I just want to explore C++ in Visual studio and best way to do is writing some program using my existing knowledge of Solidworks C# API.   So Solidworks C++ API posts are more “how” to type not much descriptive like Solidworks VBA posts, which tends to describe all in detailed manner.   That’s it!!!   I hope you will like this and enjoy this section also.   Thanks!!!  ","categories": [],
        "tags": [],
        "url": "http://localhost:4000/Solidworks-cpp-api-tutorials/",
        "teaser": null
      },{
        "title": "Solidworks C++ API - Prerequisite",
        "excerpt":"In this post, I tell you what you need to start with Solidworks C++ API:           Of course, Solidworks is required. Any version will do. But Solidworks 2016 or more is preferable.            We need Visual studio Community edition and we will download it for free.            Knowledge of C++ programming language.       Visual Studio Community edition   Since we want to learn Solidworks C++ API. We need Solidworks Software.   So I assume that you have it otherwise you don’t come to this website!   Now we need Visual Studio Community edition and Visual Studio 2019 Community edition is the latest version.   If you are downloading 1st time, then download 2019 version.   I have Visual Studo 2017 Community edition installed hence I will use 2017 Community version which is a free version for learning purpose.   One benefit of using Visual Studio is that it is a industry standard IDE hence if someone wants to do a job as developer s/he can use it and have the experience.   There are lots of videos out there which show you how to download Visual Studio Community edition.   One such video is shown below. Please go through that video which provide you all steps.        Please note that this video is 2 years old but still relevent, URLs are same for downloading purpose.   Benefit of this video is that it is part of C++ tutorial in Visual studio.   Knowledge of C++ programming language   If you don’t have Knowledge of C++ programming language, then you can use any course from YouTube.   I personally find below playlist more useful, so if you like you can learn from below playlist also.        This is it !!!   Now we are ready to start our 1st Hello World program in Solidworks using Solidworks C++ APIs.   Hope this post helps you to setup softwares.   If you like the post then please share it with your friends also.   Do let me know by you like this post or not!   Till then, Happy learning!!!  ","categories": ["Solidworks-C++-API"],
        "tags": ["Solidworks C++ API"],
        "url": "http://localhost:4000/solidworks-cpp/Prerequisite/",
        "teaser": null
      },{
        "title": "Open Solidworks & Hello World",
        "excerpt":"In this post, I tell you about how to Open Solidworks using Solidworks C++ API from Visual Studio.   I hope you have setup Visual Studio community version.   If not then please go to Solidworks C++ API - Prerequisite post and watch the suggested videos before proceeding further.     Video of Code on YouTube   Please see below video on how to Open Solidworks using Solidworks C++ API from Visual Studio.        Please note that there are no explaination in the video.   Explaination of each line and why we write code this way is given in this post.     Create a New project   Fist, we will create a new project in Visual Studio.   There are 3 different ways for creating a new project.           From File -&gt; New -&gt; Project            From New Prject icon.            Keyboard Short-cut i.e. Ctrl+Shift+N.       Below image show how to create a New Project from File option:      In above image, see Red color box.   Below image show how to create a New Project from New Project Icon option:      In above image, see Red color box.   When we select one of the above option we get a new window which is shown in below.      In above image I have numbered the Red colored box.   These numbers are explained below:           The programming language you want to use for New Project. For our purpose, we use “Visual C++”.            It is, which type of project you want to create. There are 3 different type of projects we can create. In above image, we will create an empty project.            It is the name of project we want to create. We named our project as OpenSolidworkTest.            The location of project we want. We use default location provided in above image.            It is option if we want to create a Solution file for this project or not. In our case, we want to create a Solution file.            Hit Ok button after completing all fields.         Add Source file   After creating a new project, we get a screen as shown in below image.      This project has no file to write.   Now we add a cpp file into Source Files filter folder.   For this please follow given steps:           For this select Source Files filter folder and Click Right Mouse Button (RMB).            By doing this a context menu is appear as shown in below image.            From this context menu, select “Add” –&gt; “New Item”, as shown in below image.          This will open a new window as shown in below image.      Just select “Add” option as shown in above image.   This will add “Source.cpp” file into our project.     Add References to Solidworks Type Library files   Now we need to add References to Solidworks Type Library files.   For this please follow below steps.           Select the OpenSolidworkTest project and and Click Right Mouse Button (RMB).            By doing this a context menu is appear as shown in below image.            From this context menu, select “Properties” option, which is the last one, as shown in below image.          This will open a new window as shown in below image.      Now following below steps:           Select C/C++ option            Add SOLIDWORKS folders path to 2nd Red colored box as shown in below image. Usually this path is “C:\\Program Files\\ Solidworks Corp\\SOLIDWORKS” if installed in default location.          After adding the folder path, select “Apply” button.   This complete the process of adding References to Solidworks Type Library files.     Add Code to Source.cpp file   Now we need to add to Source.cpp file.   Please copy the below code sample to your Source.cpp file.   #include &lt;atlbase.h&gt;  #import \"sldworks.tlb\" raw_interfaces_only, raw_native_types, no_namespace, named_guids  // SOLIDWORKS type library  #import \"swconst.tlb\" raw_interfaces_only, raw_native_types, no_namespace, named_guids   // SOLIDWORKS constants type library  int main() { \t// Initialize COM \t// Do this before using ATL smart pointers so COM is available. \tCoInitialize(NULL);  \t// Use a block, so the smart pointers are destructed when the scope of this block is left \t{ \t\t// COM Pointer of Soldiworks object \t\tCComPtr&lt;ISldWorks&gt; swApp;  \t\t// Create an instance of Solidworks application \t\t// If it fails then return 0 and close program \t\tif (swApp.CoCreateInstance(__uuidof(SldWorks), NULL, CLSCTX_LOCAL_SERVER) != S_OK)  \t\t{ \t\t\t// Stop COM  \t\t\tCoUninitialize(); \t\t\treturn(0); \t\t}  \t\t// If created successfully, then visible the Solidworks \t\tswApp-&gt;put_Visible(VARIANT_TRUE);  \t\t// COM Style String for message to user \t\tCComBSTR _messageToUser(L\"Hello World!!! I am from Solidworks C++ API.\");  \t\t// long type variable to store the result value by user \t\tlong _lMessageResult;  \t\t// Send a message to user and store the return value in _lMessageResult by referencing it \t\tswApp-&gt;SendMsgToUser2(_messageToUser, swMessageBoxIcon_e::swMbInformation, swMessageBoxBtn_e::swMbOk, &amp;_lMessageResult); \t}  \t// Stop COM  \tCoUninitialize(); }   Now Build the Solution as shown in below image.      After Building Solution run the program by pressing F5.     Final Result   After running the program wait for few minute.   You will get result as shown in below image!!!        This is it !!!   We have completed our Hello World program in Solidworks using Solidworks C++ APIs.   Hope this post helps you to start with Solidworks C++ API.   If you like the post then please share it with your friends also.   Do let me know by you like this post or not! I will continue creating Solidworks C++ posts.   Till then, Happy learning!!!  ","categories": ["Solidworks-C++-API"],
        "tags": ["Solidworks C++ API"],
        "url": "http://localhost:4000/solidworks-cpp/open-solidworks/",
        "teaser": null
      },{
        "title": "Open Solidworks Part Document",
        "excerpt":"In this post, I tell you about how to Open Solidworks Part Document using Solidworks C++ API from Visual Studio.   I hope you have setup Visual Studio community version.   If not then please go to Solidworks C++ API - Prerequisite post and watch the suggested videos before proceeding further.     Video of Code on YouTube   Please see below video on how to Open Solidworks Part Document using Solidworks C++ API from Visual Studio.        Please note that there are no explaination in the video.   Explaination of each line and why we write code this way is given in this post.     Create a New project   Fist, we will create a new project in Visual Studio.   As shown in below image I have created a new project named OpenPartDocument in Visual Studio.      If you want to know more detail for Creating a New Project in Visual Studio, please visit Create a New project section of Solidworks C++ API - Open Solidworks &amp; Hello World post.     Add Source file   After creating a new project, we need to Add Source file to our project.   I have already explain each steps taken to create/add a “Source.cpp” into our project in Add Source file section of Solidworks C++ API - Open Solidworks &amp; Hello World post.   This will add “Source.cpp” file into our project.     Add References to Solidworks Type Library files      This section is copy/paste from Solidworks C++ API - Open Solidworks &amp; Hello World post.    Now we need to add References to Solidworks Type Library files.   For this please follow below steps.           Select the OpenSolidworkTest project and and Click Right Mouse Button (RMB).            By doing this a context menu is appear as shown in below image.            From this context menu, select “Properties” option, which is the last one, as shown in below image.          This will open a new window as shown in below image.      Now following below steps:           Select C/C++ option            Add SOLIDWORKS folders path to 2nd Red colored box as shown in below image. Usually this path is “C:\\Program Files\\ Solidworks Corp\\SOLIDWORKS” if installed in default location.          After adding the folder path, select “Apply” button.   This complete the process of adding References to Solidworks Type Library files.     Add Code to Source file   Now we need to add to Source.cpp file.   Please copy the below code sample to your Source.cpp file.   #include &lt;atlbase.h&gt;  #import \"sldworks.tlb\" raw_interfaces_only, raw_native_types, no_namespace, named_guids  // SOLIDWORKS type library  #import \"swconst.tlb\" raw_interfaces_only, raw_native_types, no_namespace, named_guids   // SOLIDWORKS constants type library  int main() { \t// Initialize COM \t// Do this before using ATL smart pointers so COM is available. \tCoInitialize(NULL);  \t// Use a block, so the smart pointers are destructed when the scope of this block is left \t{ \t\t// COM Pointer of Soldiworks object \t\tCComPtr&lt;ISldWorks&gt; swApp;  \t\t// COM Pointer of Soldiworks Model Document \t\tCComPtr&lt;IModelDoc2&gt; swDoc;  \t\t// Variable to check if function is  \t\tHRESULT result = NOERROR;  \t\t// COM Style String for message to user \t\tCComBSTR _messageToUser;  \t\t// long type variable to store the result value by user \t\tlong _lMessageResult;  \t\t// Create an instance of Solidworks application \t\t// If it fails then return 0 and close program \t\tif (swApp.CoCreateInstance(__uuidof(SldWorks), NULL, CLSCTX_LOCAL_SERVER) != S_OK)  \t\t{ \t\t\t// Stop COM  \t\t\tCoUninitialize(); \t\t\treturn(0); \t\t}  \t\t// COM Style String to store document type \t\tCComBSTR _documentType;  \t\t// Get the Default Part document \t\tswApp-&gt;GetUserPreferenceStringValue(swUserPreferenceStringValue_e::swDefaultTemplatePart, &amp;_documentType);  \t\t// Create a new Part Document  \t\tresult = swApp-&gt;INewDocument2(_documentType, 0, 0, 0, &amp;swDoc);  \t\t// If there are no Default Part document assign then show a message to user \t\t// and Stop COM, Visible the Solidworks and return the function \t\tif (result != S_OK) \t\t{ \t\t\t// COM Style String for message to user \t\t\t_messageToUser = (L\"Failed to open document.\\nPlease try again.\");  \t\t\t// Send a message to user and store the return value in _lMessageResult by referencing it \t\t\tswApp-&gt;SendMsgToUser2(_messageToUser, swMessageBoxIcon_e::swMbInformation, swMessageBoxBtn_e::swMbOk, &amp;_lMessageResult);  \t\t\t// Visible the Solidworks \t\t\tswApp-&gt;put_Visible(VARIANT_TRUE);  \t\t\t// Stop COM  \t\t\tCoUninitialize(); \t\t\treturn(0); \t\t}  \t\t// If created successfully, then visible the Solidworks \t\tswApp-&gt;put_Visible(VARIANT_TRUE); \t}  \t// Stop COM  \tCoUninitialize(); }   Now Build the Solution as shown in below image.      After Building Solution run the program by pressing F5.     Final Result   After running the program wait for few minute.   You will get result as shown in below image!!!        Issues and Solutions   There are some issues I can think of which might be come to some people.   Those are as follows:   Issue 1:   Program closed without open Solidworks!   Solution:   I you face this issue, then open Solidworks Manually one time, close it and then run the program.  It will solve this issue.   Issue 2:   Program unable to create Part Document   Solution:   This is a tricky one!!!  If you face this issue, then you need to confirm in Solidworks that you have assigned the \"default Part template\".  Please refer to below image for proper setting to fix this issue.      I hope this will helpful!!!     This is it !!!   We have completed our Open Part Document program in Solidworks using Solidworks C++ APIs.   Hope this post helps you to start with Solidworks C++ API.   If you like the post then please share it with your friends also.   Do let me know by you like this post or not! I will continue creating Solidworks C++ posts.   Till then, Happy learning!!!  ","categories": ["Solidworks-C++-API"],
        "tags": ["Solidworks C++ API"],
        "url": "http://localhost:4000/solidworks-cpp/open-part-document/",
        "teaser": null
      },{
        "title": "Visual Basic for Application Introduction",
        "excerpt":"To understand Visual Basic for Application, lets look at the following questions.   What is Visual Basic for Application?   Visual Basic for Applications also known as VBA, is a programming language developed by Microsoft.   SOLIDWORKS, along with Excel and other software of Office Suit, includes VBA language (at no extra cost).   In a nutshell, VBA is a tool that people use to develop program that control SOLIDWORKS.   Think about a robot that knows everything about SOLIDWORKS. This robot can read instruction, and it can also operate SOLIDWORKS very fast and accurate.   When you want the robot to do something in SOLIDWORKS, you write up a set of robotic instruction by using special codes.   Tell the robot to follow your instruction, while you sit back and take some rest. That’s kind of what VBA is all about.   What can you do with VBA?   You know that people use different CAD softwares, not just SOLIDWORKS, for different tasks.   Below is a list of some common tasks:           Creating sketches            Creating 3D models            Creating Simple to Complex assemblies of 3D models            Linking files with external softwares mostly excel and many more tasks       This list could go on and on, but you get the idea.   My point is simply that a CAD Software like SOLIDWORKS used for wide variety of things.   Everyone visiting this blog has different needs and expectations.   One thing virtually every visitor has common is the need to automate some aspect of their work. That is what VBA is all about.   What are the advantages and disadvantages of VBA?   In this section, I briefly describe the good things about VBA – and I also explore its darker side.   VBA Advantages   You can automate almost anything you do in SOLIDWORKS.   To do so, you write instructions that SOLIDWORKS carries out.   Automating a task by using VBA offers several advantages:           SOLIDWORKS always executes the tasks in exactly the same way. (In most cases consistency is good.)            SOLIDWORKS performs the task much faster than you do it manually.            If you are a good macro programmer, SOLIDWORKS always performs the task without error.            If you set things properly, someone who don’t know anything about SOLIDWORKS can perform task.            For long, time-consuming tasks, you don’t have to sit in front of your computer and get board. SOLIDWORKS does work, while you drink water.       VBA disadvantages   It’s only fair that I give equal time to listing the disadvantages (or potential disadvantages) of VBA:           You have to know how to write programs in VBA (but that’s why you are here, right?). Fortunately, it’s not as difficult as you might expect.            Sometimes, things go wrong. In other words, you can’t blindly assume that your VBA program will always work correctly under all circumstances. Welcome to world of debugging and, if others are using your macros, be prepared for technical support.       VBA in nutshell   Just to let you know what you are in for, I’ve prepared a quick summary of what VBA is all about.           You perform actions in VBA by writing (or recording) code in a VBA module. You view and edit VBA modules by using the Visual Basic Editor (VBE).            A VBA module consists of Sub procedures. A sub procedure is a chunk of computer code that performs some action on or with objects. The following example shows a simple Sub procedure called AddThem.       This amazing program displays the result of 1 plus 1.   Sub AddThem()     Sum = 1 + 1     MsgBox (\"The answer is \" &amp; Sum) End Sub   Next post will be about Visual Basic Editor or VBE.  ","categories": [],
        "tags": ["VBA"],
        "url": "http://localhost:4000/vba/vba-Introduction/",
        "teaser": null
      },{
        "title": "Visual Basic Editor (VBE)",
        "excerpt":"Visual Basic Editor or VBE is a separate application in your CAD application.   In this application you write and edit your Macro code.   This application works without a glitch with most of the CAD programs.   By without a glitch I mean that your CAD program take cares of opening of VBE when you need it.      you can’t run the VBE separately. You CAD program must be running in order to run VBE.    VBE Environment   Below figure shows the VBE program, with some of the key parts given.   Chances are that your VBE program window won’t look exactly like that below figure.   The VBE contains several windows, and it’s highly customizable. You can hide windows, rearrange windows, dock windows, and so on.        Menu Bar   The VBE Menu Bar works just like every menu bar of other applications.   It contains commands that you use to do things with the various components in the VBE.   You also find that many of the menu commands have shortcut keys associated with them.   The VBE also features shortcut menus. You can right-click virtually anything in the VBE and get a shortcut menu of common commands.   Tool Bar   The Standard toolbar, which is directly under the menu bar by default (refer to above figure), is one of four VBE toolbars available. You can customize the toolbars.   If you’re so inclined, use the View Toolbars command to work with VBE toolbars.   Most people just leave them as they are.   Project Window   The Project Window display a tree diagram that shows every file opened.   If the Project Window is not visible, press “Ctrl+R” or use the View -&gt; Project Explorer command.   To hide the Project Window, click the close button in its title bar.   Code Window   Code Window is place where we write our code. Therefore this window contains VBA code.   Every object in a project has association with Code Window. To view the code for any object’s, double click on the object in the Project Window.   Unless you have added some VBA code, the Code window will be empty.   Immediate Window   The Immediate window may or may not visible. If it is not visible, press “Ctrl+G” or use View -&gt; Immediate window command.   To close The Immediate window, click the close button in its title bar.   The Immediate window is most useful for executing VBA statement directly and for debugging your code.   If you are just starting VBA, this window won’t be all that useful, so feel free to hide it and free up some screen space.   Next post will be about VBE Windows.  ","categories": [],
        "tags": ["VBA"],
        "url": "http://localhost:4000/vba/vba-vbe-editor/",
        "teaser": null
      },{
        "title": "VBE Windows",
        "excerpt":"In this post we look following windows in Visual Basic Editor:      Project Window   Code Window   Project Window   When you are working in VBE, each file open is called a Project.  You can think of a project as a collection of objects.   You can expand a project by clicking plus sign (+) at the left of the project’s name in Project window.   Contract a project by clicking minus sign (-) to the left of the project’s name in Project window. Or you can simply double click the items to expand or contract them.   Every project expands to show at least one node. In our previous image we have SOLIDWORKS Objects. This node expands to show an item for Solidworks application.   If the project has any VBA module, the project listing also shows a Module node.   A project can also contain a node called Forms, which contains UserForm objects (which holds custom dialog boxes).   The concept of Object may not be clear to you at this moment. However, things become much clearer in subsequent topics.   Don’t be too concerned if you don’t understand what’s going on at this point.   Adding a new VBA module   Follow below steps to add a new VBA module to a project:      Select the projects name in the Project Window.   Select Insert -&gt; Module.   or      Right click the project’s name.   Select Insert -&gt; Module from the shortcut menu.   When you record a macro or create a blank macro, Solidworks automatically adds a module to hold the codes.   Removing a new VBA module   If you want to remove a module from Project window then follow below steps for that:      Select the module’s name in the Project Window.   Select Fie -&gt; Remove.   Or      Right-click the module’s name.   Select remove from the shortcut menu.   VBE always trying to keep you from doing something that you will regret, hence it will ask if you want to export the code in the module before deleting the code.   And in most cases, you don’t want to export. If you do want to export the code, please see next section.   Exporting and Importing of objects   Every object in a VBA project can be saved to a separate file. Saving an individual object in a project is known as Exporting.   Reason for exporting a file is that you can also import objects in a project.   Exporting and Importing objects might be useful if you want to use a particular object (such as a VBA module or a UserForm) in a different project.   Below steps show how to export an object:      Select an object in the Project window.   Select File -&gt; Export file or press Ctrl + E.   You get a dialog box that asks for a filename. Note that the object remains in the original project only a copy of object is exported.   Importing an object is also a similar process, which is shown below:      Select the project’s name in the Explorer window.   Select File -&gt; Import file or press Ctrl + M.   You get a dialog box that asks for a file. Locate the file and click open.   You should only import a file if was export by using File -&gt; Export file command.     Code Window   As you become proficient with VBA, you spend a lot of time with working in the Code window.   Macros that you record are stored in a module, and you can type a VBA code directly into a VBA module.   Minimize and maximize Code windows   If you have several projects open, the VBE may have lots of Code window at any given time. Below figure shows an example of this.      Code windows are much like your files opened in Solidworks. You can minimize them, maximize them, resize them, and hide them and so on.   Most people find it much easier to maximize the code window that they are working on. Doing so lets you see more code and keeps you from getting distracted.   To maximize the Code window, click the maximize button in its title bar or just double-click the title bar of Code window to maximize it.   To restore a window to its original size, click the restore button. When the Code window is maximized, its title bar is not visible, so you will find the restore below the VBE title bar.   Sometimes you want to have two or more Code windows visible.   For example, you want to compare the code in the two modules or copy code from one module to another.   You can arrange the windows manually, or use the Window -&gt; Tile Horizontally or Window ⇨ Tile Vertically command to arrange them automatically.   You can quickly switch among code window by pressing Ctrl + TAB. If you repeat that key combination, you keep cycling through all the open code windows.   Pressing Ctrl + Shift + TAB cycles through the windows in reverse order.   Minimizing a window gets it out of the way. You can also click the window close button in a Code window’s title bar to close the window completely. (Closing a window just hides it; you won’t lose anything.)   To open it again, just double-click the appropriate object in the Project window. Working with these Code windows sounds difficult that it really is.   Creating a Module   In general, a VBA module can hold three types of code:           Declaration: One or more information statement that you provide to VBA. For example, you can declare the data type for variables you plan to use, or set some other module-wide options.            Sub procedures: A set of programming instructions that performs some actions.            Function procedures: A set of programming instructions that returns a single value.       A single VBA module can store any number of Sub procedures, Function procedure and declaration.   Well, there is a limit – about 64,000 characters per module. It is very rare that if anybody reaches that limit but if someone reaches then the solution is simply insert a new module.   How you organize a VBA module is totally up to you. Some people prefer to keep all their VBA code in a single module others (like me) likes to split up the code into several different modules or even classes. It is a personal choice like arranging furniture.   Inserting VBA code into a Module   An empty VBA module is like a fake food you see in the advertisements. It looks good but it does not really do much.   Before you can do anything meaningful, you must have some VBA code in the VBA module. You can insert VBA code into VBA module in three ways:           Insert code directly into code window.            Use the macro recorder to record your actions and convert them into VBA code.            Copy the code from one module and paste it into another module.       Entering code directly into a module   Sometimes the best route is the most direct one. Entering the code directly involves, typing the code via your keyboard.   Entering and editing a text in a VBA module works as you might expect. You can select, copy, cut, paste and do other things as you do in other word processing software.   Use the TAB key to indent some of the lines to make your code easier to read. This is not necessary, but it is a good habit to acquire.   As you go through you will understand why indenting code lines is helpful.   A single line of VBA code can be as long as you like.   However, you may want to use the line-continuation character to break up the lengthy line of code.   To continue a single line of code (also known as statement) from one line to next, end the first line with a space followed by an underscore (_). Then continue the statement in the next line.   Below is given the example of a single statement split into two lines:   set swPart = swApp.NewDocument(swApp.GetUserPreferenceStringValue _     (swUserPreferenceStringValue_e.swDefaultTemplatePart),0,0,0)   This statement would perform the same way if it were entered in a single line (with no continuation characters).   Notice that I indented the second line of statement. Indenting is optional but it clarifies the fact that these lines are not separate statements.      If you are wondering what above statement does, then the answer is above statement open a new part with default part template in SolidWorks. This code is not inserted using macro recorder, instead I write it manually to find a default part template and use that template to open a new part.    The engineers who designed VBE knew that people like us would be making mistakes. Therefore, the VBE has multiple levels of Undo and Redo.   If you deleted a statement that you should not have, use the Undo button on the toolbar (or press Ctrl+Z) until the statement shows up.   After undoing, you can use the Redo button to perform the changes you have undone. This redo/undo stuff is much like you use in other software. Until you use it, you cannot understand.   Ready to enter some live code, try the following steps:      Go to your VBE.   Double-click your module if it is not opened.   Go to COde Window.   Type the following code into Code window:   Sub GuessName()     Msg = \"Is this a CAD Software?\"     Ans = MsgBox(Msg, vbYesNo)     If Ans = vbNo Then MsgBox \"Oh, that’s fine.\"     If Ans = vbYes Then MsgBox \"You must be joking!\" End Sub     Make sure the cursor is located anywhere within the text you typed, and then press F5 to execute the procedure.   F5 is a shortcut for the Run -&gt; Run Sub/UserForm command.   If you entered the code correctly, VBE execute the procedure, and you can respond to the simple dialog box as shown in below figure.      When you enter the code listed in step 4, you might notice that the VBE makes some adjustments to the text you enter.   For example, after you type the sub statement, the VBE automatically insert the End Sub statement, and if omit the space before or after an equal sign, the VBE insert the space for you.   Also, the VBE changes the color and capitalization of some text. This is all perfectly normal. It is just VBE’s way of keeping things neat and readable.   If you followed the previous steps, you just wrote a VBA Sub procedure, also known as a macro.   When you press F5, VBE executes the code and follows the instructions.   In other words, VBE evaluates each statement and does what you told it to do.   This simple macro uses the following concepts:      Defining a Sub procedure (the first line).   Assigning values to variables (Msg and Ans).   Using a built-in VBA function (MsgBox).   Using built-in VBA constants (vbYesNo, vbNo, and vbYes).   Using an If-Then construct (twice).   Ending a Sub procedure (the last line)   Using the Macro recorder   Another way you can get code into a VBA module is by recording your actions, using the in-built macro recorder.   By the way, there is absolutely no way you can record the GuessName procedure shown in the preceding section.   You can record only things that you can do directly in Solidworks.   Displaying a message box is not in application’s normal repertoire. The macro recorder is useful, but in many cases, you’ll probably need to enter at least some code manually.   We have already seen how macros are recorded. So there is no need for us to go twice for same thing. If you want to see how it is done go to Open VBA in Solidworks topic   Copying VBA code   The final method for getting code into a VBA module is to copy it from another module or from some other place (such as a Web site i.e. Solidworks forum).   For example, a Sub or Function procedure that you write for one project might also be useful in another project.   Instead of wasting time in re-entering the code, you can activate the module and use the normal Clipboard copy-and-paste procedures.   After pasting it into a VBA module, you can modify the code if necessary.   You’ll also find lots of VBA code examples on the Web.   If you’d like to try them, select the code in your browser and press Ctrl+C to copy it. Then, activate a module and press Ctrl+V to paste it.   Next post will be about Sub and Function Procedures.  ","categories": [],
        "tags": ["VBA"],
        "url": "http://localhost:4000/vba/vba-windows/",
        "teaser": null
      },{
        "title": "Sub and Function Procedures",
        "excerpt":"The VBA code that you write in the Visual Basic Editor is known as a procedure.   The two most common types of procedures are Sub and Function.      A Sub procedure is a group of VBA statements that performs an action (or actions).   A Function procedure is a group of VBA statements that performs a calculation and returns a single value.   Most of the macros you write in VBA are Sub procedures.   You can think of a Sub procedure as being like a command: “Execute the Sub procedure and something happens”.   Exactly what happens depends on the Sub procedure’s VBA code.   A Function is also a procedure, but it’s quite different from a Sub.   For understanding a Function let’s take an example from MS Excel.   Excel includes many worksheet functions that you use every day. Examples include SUM. This SUM function takes input in form of values and then it does calculation behind the scene, and then returns a single value.   The same goes for Function procedure that you develop with VBA.   Sub procedures   Every Sub procedure starts with the keyword Sub and ends with an End Sub statement. Here’s an example:   Sub Message()    MsgBox \"That’s all folks!\" End Sub   This example shows a procedure named Message. A set of parentheses follows the procedure’s name.   In most cases, these parentheses are empty. However, you may pass arguments to Sub procedures from other procedures.   If your Sub uses arguments, list them between the parentheses.      Please remember when you record a macro with the macro recorder; the result is always a Sub procedure.    Function procedures   Every Function procedure starts with the keyword Function and ends with an End Function statement.   Here’s an example:   Function CubeRoot(number)    CubeRoot = number ^ (1/3) End Function  This function, named CubeRoot, takes one argument (named number), which is enclosed in parentheses.   Functions can have any number of arguments or none at all.   When you execute the function, it returns a single value — the cube root of the argument passed to the function.   VBA allows you to specify what type of information (also known as data type) is returned by a Function procedure.   You can execute a Function procedure from another procedure (a Sub or another Function procedure).      Please note that no matter how hard you try, you can’t use the macro recorder to record a Function procedure. You must manually enter every Function procedure that you create.    Naming Subs and Functions   Like humans &amp; pets, every Sub and Function procedure must have a name.   Although it is perfectly acceptable to name anything what you want, it’s usually not a good idea to use such a freewheeling attitude when naming procedures.   When naming procedures, you must follow a few rules:           You can use letters, numbers, and some punctuation characters, but the first character must be a letter.            You can’t use any spaces or periods in the name.            VBA does not distinguish between uppercase and lowercase letters.            You can’t embed any of the following characters in a procedure name: #, $, %, &amp;, @, ^, *, or !            Procedure names can be no longer than 255 characters. (Of course, you would never make a procedure name this long.)       Ideally, a procedure’s name describes the routine’s purpose.   Some programmers prefer using sentence-like names that provide a complete description of the procedure.   Some examples include WriteReportToTextFile and Get_Print_Options_and_Print_Report.   The use of such lengthy names has pros and cons.   On the one hand, such names are descriptive and usually unambiguous.  On the other hand, they take longer to type.   Everyone develops a naming style, but the main objectives are to make the names descriptive and to avoid meaningless names such as Update, Fix, and Macro1.   Next post will be about Executing Sub &amp; Function procedures.  ","categories": [],
        "tags": ["VBA"],
        "url": "http://localhost:4000/vba/sub-and-function-procedure/",
        "teaser": null
      },{
        "title": "Executing Sub and Function Procedures",
        "excerpt":"Although you may not know much about developing procedures at this point, I’m going to jump ahead a bit and discuss how to execute these procedures.   This is important because these procedures are worthless unless you know how to execute it.   Executing Sub procedure   Executing a Sub procedure means the same thing as running or calling a Sub procedure.   You can use whatever terminology you like.   You can execute a VBA Sub in many ways - that’s one reason you can do so many useful things with Sub procedures.   Here’s a list of the ways to execute a Sub procedure:      With the Run -&gt; Run Sub/UserForm command (in the VBE). VBE executes the Sub procedure in which the cursor is located. This menu command has two alternatives: the F5 key and the Run Sub/UserForm button on the Standard toolbar in the VBE. These methods don’t work if the procedure requires one or more arguments.   From another Sub procedure that you write.   From a custom item on the ribbon you develop.   From the Immediate window in the VBE. Just type the name of the Sub procedure and press Enter.   From Run Macro -&gt; Select Macro you want to run. By this, your macro runs the Sub procedure without opening VBE.   I demonstrate some of these techniques in the following sections.   Before I can do that, you need to enter a Sub procedure into a VBA module as suggested below:      Open the VBE in Solidworks.   Enter the following code into your module   Sub CubeRoot()    Number = InputBox(\"Enter a positive number.\")    MsgBox number ^ (1/3) &amp; \"is the cube root.\" End Sub   This procedure asks the user for a number and then displays that number’s cube root in a message box.   Below Figures shows what happens when you execute this procedure.      I entered 4 as input value. And get result as shown in below image.      By the way, CubeRoot is not an example of a good macro. It doesn’t check for errors, so it fails easily.   To see what I mean, try clicking the Cancel button in the input box or entering a negative number.   Executing the Sub procedure directly   The quickest way to execute this procedure is by doing so directly from the VBA module in which you defined it.   Follow these steps:      Activate the VBE and select the VBA module that contains the procedure.   Move the cursor anywhere in the procedure’s code.   Press F5 (or choose Run -&gt; Run Sub/UserForm).   Respond to the input box and click OK.   The procedure displays the cube root of the number you entered.   You can’t use the Run -&gt; Run Sub/UserForm command to execute a Sub procedure that uses arguments, because you have no way to pass the arguments to the procedure.   If the procedure contains one or more arguments, the only way to execute it is to call it from another procedure — which must supply the argument(s).   Executing the Sub procedure from another procedure   You can also execute a Sub procedure from another procedure.   Follow these steps if you want to give this a try:      Activate the VBA module that holds the CubeRoot routine.        Enter this new procedure (either above or below CubeRoot code — it makes no difference):        Sub NewSub()     Call CubeRoot  End Sub           Execute the NewSub macro.   The easiest way to do this is to move the cursor anywhere within the NewSub code and press F5.  Notice that this NewSub procedure simply executes the CubeRoot procedure.      Please note that the keyword Call is optional. The statement can consist of only the Sub procedure’s name. I find that using the Call keyword makes it perfectly clear that a procedure is being called.      Executing Function procedure   Function procedures, unlike Sub procedures, can be only executed in only one way:      By calling the function from another Sub procedure or Function procedure.   Try this simple function. Enter it into a VBA module:   Function CubeRoot()    CubeRoot = number ^ (1/3) End Function   This function is pretty bored — it merely calculates the cube root of the number passed to it as its argument.   It does provide a starting point for understanding functions.   It also presents an important concept about functions: how to return the value.   (You do remember that a function returns a value, right?)   Notice that the single line of code that makes up this Function procedure performs a calculation.   The result of the math (number to the power of 1⁄3) is assigned to the variable CubeRoot.   Not coincidentally, CubeRoot is also the name of the function.   To tell the function what value to return, you assign that value to the name of the function.   Executing the Function procedure from a Sub procedure   Because you can’t execute a function directly, you must call it from another procedure.   Enter the following simple procedure in the same VBA module that contains the CubeRoot function:   Sub CubeRoot()    Ans = CubeRoot(125)    MsgBox Ans End Sub   When you execute the CubeRoot procedure (using any of the methods described earlier), Youe software displays a message box that contains the value of the Ans variable, which is 5.   Here’s what’s going on:      CubeRoot(125) means it CubeRoot receive argument of 125.   Then Function CubeRoot(number) is executed. As described previously, number is an argument. And here the value of this is 125.   Then by number ^ (1/3) we get the cube of 125. (why? Because 125 is argument passed by the sub function and this 125 is the value of number.)   After that cube value of 125, i.e. 5, is assigned to or given to or equal to CubeRoot. This CubeRoot assigned to or given to or equal to Ans. After that message boxes show the value of 5 in your screen.      Please read again if you don’t understand what is going on here.    Next post will be about Programming Concepts, Comments and Data-types.  ","categories": [],
        "tags": ["VBA"],
        "url": "http://localhost:4000/vba/executing-procedures/",
        "teaser": null
      },{
        "title": "Programming Concepts, Comments and Data-types",
        "excerpt":"Visual Basic for application (VBA) is a real, live programming language, it uses many elements common to all programming languages.   In subsequent topics, we go through several of these elements:      Comments   Variables   Constants   Data types   Arrays and few other concepts   If you’ve programmed with other languages, some of this topics will be familiar or if you’re a programming newbie, it’s time to roll up your sleeves and get busy.   Comments in VBA Code   A comment is the simplest type of VBA statement because VBA ignores these statements, they can consist of anything you want.   You can insert a comment to remind yourself why you did something or to clarify some particularly code you wrote.   Use comments liberally and extensively to describe what the code does (which isn’t always obvious by reading the code itself).   Often, code that makes perfect sense today mystifies you tomorrow.   You begin a comment with an apostrophe (‘). VBA ignores any text that follows an apostrophe in a line of code.   You can use a complete line for your comment or insert your comment at the end of a line of code.   The following example shows a VBA procedure with three comments, although they’re not necessarily good comments:   Sub CommentDemo() '  This procedure does nothing of value    x = 0   'x represents nothing    'Display the result    MsgBox x End Sub   The apostrophe indicates a comment rule has one exception.   VBA doesn’t interpret an apostrophe inside a set of quotation marks as a comment indicator.   For example, the following statement doesn’t contain a comment, even though it has an apostrophe:   MsgBox = \"Can't continue.\"   When you’re writing code, you may want to test a procedure by excluding a particular statement or group of statements.   You could delete the statements and then retype them later but that’s a waste of time.   A better solution is to simply turn those statements into comments by inserting apostrophes.   VBA ignores statements beginning with apostrophes when executing a routine.   To reactivate those commented statements, just remove the apostrophes.   Here’s a quick way to convert a block of statements to comments.   In the VBE, choose View -&gt; Toolbars -&gt; Edit to display the Edit toolbar.   To convert a block of statements to comments, select the statements and click the Comment Block button.   To remove the apostrophes, select the statements and click the Uncomment Block button.   Although comments can be helpful, not all comments are created equal.   For example, the following procedure uses lots of comments, but they add nothing of value.   In this case, the code is clear enough without the comments.   Sub BadComments() '  Declare variables    Dim x As Integer    Dim y As Integer    Dim z As Integer '  Start the routine    x = 100    'Assign 100 to x    y = 100    'Assign 100 to y '  Add x and y and store in z    z = x + y '  Show the result    MsgBox z End Sub   Everyone develops his or her own style of commenting.   To be useful, however, comments should convey information that’s not immediately obvious from reading the code.   Otherwise, comments just chew up bytes and make files larger than necessary.   The following tips can help you make effective use of comments:           Briefly describe the purpose of each Sub or Function procedure you write.            Use comments to keep track of changes you make to a procedure.            Use a comment to indicate that you’re using a function or a construct in an unusual or nonstandard manner.            Use comments to describe the variables you use, especially if you don’t use meaningful variable names.            Use a comment to describe any workarounds you develop to overcome bugs in your code.            Write comments as you develop code, instead of saving the task for a final step.            Depending on your work environment, consider adding a joke or two as a comment. The person who takes over your job when you get promoted might appreciate the humour.       Data types in VBA   When I talk about data type, I’m referring to the manner in which a program stores data in memory - for example, as integers, real numbers, or strings.   Although VBA can take care of these details automatically, it does so at a cost (There’s no free lunch).   Letting VBA handle your data typing results in slower execution and inefficient memory use.   For small applications, this usually doesn’t present much of a problem.   But for large or complex applications, which may be slow or need to conserve every last byte of memory, you need to be on familiar terms with data types.   VBA automatically handles all the data details, which makes life easier for programmers.   Not all programming languages provide this luxury.   For example, some languages are strictly typed, which means the programmer must explicitly define the data type for every variable used.   VBA does not require that you declare the variables that you use, but it’s definitely a good practice.   VBA has a variety of built-in data types. Below table lists the most common types of data that VBA can handle.                 VBA’s Built-In Data Types                   Data Type         Byte used         Range of values                   Boolean         2         True or False                   Integer         2         –32,768 to 32,767                   Long         4         –2,147,483,648 to 2,147,483,647                   Single         4         –3.402823E38 to 1.401298E45                   Double (negative)         8         –1.79769313486232E308 to –4.94065645841247E-324                   Double (positive)         8         4.94065645841247E–324 to  1.79769313486232E308                   Currency         8         –922,337,203,685,477.5808 to 922,337,203,685,477.5807                   Date         8         1/1/100 to 12/31/9999                   String         1 per char         varies                   Object         4         Any defined object                   Variant         Varies         Any data type                   User defined         Varies         Varies                            Next post will be about VBA Variables.  ","categories": [],
        "tags": ["VBA"],
        "url": "http://localhost:4000/vba/programming-concepts/",
        "teaser": null
      },{
        "title": "VBA Variables",
        "excerpt":"VBA’s main purpose is to manipulate data. VBA stores the data in your computer’s memory; it may or may not end up on disk.   Some data, such as sketch, resides in objects.   Other data is stored in variables that you create.   A variable is simply a named storage location in your computer’s memory.   You have lots of flexibility in naming your variables, so make the variable names as descriptive as possible.   You assign a value to a variable by using the equal sign operator.   The variable names in these examples appear on both the left and right sides of the equal signs.   Note that the last example uses two variables.   x = 1 InterestRate = 0.075 LoanPayoffAmount = 243089 DataEntered = False x = x + 1 UserName = \"Bill Gates\" DateStarted = #3/14/2010# MyNum = YourNum * 1.25   VBA enforces a few rules regarding variable names:      You can use letters, numbers, and some punctuation characters, but the first character must be a letter.   You cannot use any spaces or periods in a variable name.   VBA does not distinguish between uppercase and lowercase letters.   You cannot use the following characters in a variable name: #, $, %, &amp;, or !.   Variable names can be no longer than 255 characters. Of course, you’re only asking for trouble if you use variable names 255 characters long.   To make variable names more readable, programmers often use mixed case (for example, PartDimension) or the underscore character (part_dimension).   VBA has many reserved words that you can’t use for variable names or procedure names.   These include words such as Sub, Dim, With, End, Next, and For.   If you attempt to use one of these words as a variable, you may get a compile error (which means your code won’t run.   So, if an assignment statement produces an error message, double-check and make sure that the variable name isn’t a reserved word.   VBA does allow you to create variables with names that match names in your CAD's object model, such as sketch and part.   But, obviously, using names like that just increases the possibility of getting confused.   So resist the urge to use a variable named sketch, and use something like swSketch, mySketch or any meaning full name instead.   ","categories": [],
        "tags": ["VBA"],
        "url": "http://localhost:4000/vba/variables/",
        "teaser": null
      },{
        "title": "Declaring and Scoping of Variables",
        "excerpt":"If you read the previous topics, you now know a bit about Variables and Data-types.   In this topic, you discover how to declare a variable as a certain data type.   If you don’t declare the data type for a variable you use in a VBA routine, VBA uses the default data type: Variant.   Data stored as a Variant acts like a chameleon; it changes type depending on what you do with it.   For example, if a variable is a Variant data type and contains a text string that looks like a number (such as “123”), you can use this variable for string manipulations as well as numeric calculations.   VBA automatically handles the conversion. Letting VBA handle data types may seem like an easy way out — but remember that you sacrifice speed and memory.   Before you use variables in a procedure, it’s an excellent practice to declare your variables — that is, tell VBA each variable’s data type.   Declaring your variables makes your program run faster and use memory more efficiently.   The default data type, Variant, causes VBA to repeatedly perform time consuming checks and reserve more memory than necessary.   If VBA knows a variable’s data type, it doesn’t have to investigate and can reserve just enough memory to store the data.   To force yourself to declare all the variables you use, include the following as the first statement in your VBA module:   Option Explicit   When this statement is present, you won’t be able to run your code if it contains any undeclared variables.   You need to use Option Explicit only once: at the beginning of your module, prior to the declaration of any procedures in the module.   Keep in mind that the Option Explicit statement applies only to the module in which it resides.   If you have more than one VBA module in a project, you need an Option Explicit statement for each module.   Suppose that you use an undeclared variable (that is, a Variant) named myDimension.   At some point in your routine, you insert the following statement:   myDimnsion = 11   This misspelled variable, which is difficult to spot, will probably cause your routine to give incorrect results.   If you use Option Explicit at the beginning of your module (forcing you to declare the myDimension variable), VBE generates an error if it encounters a misspelled variation of that variable.   To ensure that the Option Explicit statement is inserted automatically whenever you insert a new VBA module; turn on the Require Variable Definition option.   You find it in the Editor tab of the Options dialog box (in the VBE, choose Tools -&gt; Options).      I highly recommend doing so.    Declaring your variables also lets you take advantage of a shortcut that can save some typing.   Just type the first two or three characters of the variable name, and then press Ctrl + Space.   The VBE will either complete the entry for you or — if the choice is ambiguous — show you a list of matching words to select from.   In fact, this slick trick works with reserved words and functions, too.   You now know the advantages of declaring variables, but how do you do this?   The most common way is to use a Dim statement.   Here are some examples of variables being declared:   Dim YourName as String Dim PartLength as Long Dim bRet as Boolean Dim X   The first three variables are declared as a specific data type.   The last variable, X, is not declared as a specific data type, so it’s treated as a Variant (it can be anything).   Besides Dim, VBA has three other keywords that are used to declare variables:      Static   Public   Private   I explain more about the Dim, Static, Public, and Private keywords later on, but first I must cover two other topics that are relevant here: a variable’s scope and a variable’s life.   Recall that your code can have any number of VBA modules and a VBA module can have any number of Sub and Function procedures.   A variable’s scope determines which modules and procedures can use the variable.   Below Table describes the scopes:                 VBA’s Variable’s Scope                   Scope         How the Variable is Declared                   Procedure only         By using a Dim or a Static statement in the procedure that uses the variable.                   Module only         By using a Dim or a Private statement              before the first Sub or Function statement in the module.                            All procedures in all modules                      By using a Public statement before the first Sub or              Function statement in the module.                 If you get confused keep reading next post on these topics.   Next post will be about Variable Scope.   ","categories": [],
        "tags": ["VBA"],
        "url": "http://localhost:4000/vba/declaring-and-scoping-of-variables/",
        "teaser": null
      },{
        "title": "Variable Scope",
        "excerpt":"A variable’s scope determines which modules and procedures can use the variable.   Procedure-only Variables   The lowest level of scope for a variable is at the procedure level.   A procedure is either a Sub or a Function procedure.   Variables declared with this scope can be used only in the procedure in which they are declared.   When the procedure ends, the variable no longer exists (it goes to the great big bucket in the sky), and your CAD application frees up its memory.   If you execute the procedure again, the variable comes back to life, but its previous value is lost.   The most common way to declare a procedure-only variable is with a Dim statement.   Dim doesn’t refer to the mental capacity of the VBA designers.   Rather, it’s an old programming term that’s short for dimension, which simply means you are setting aside memory for a particular variable.   You usually place Dim statements immediately after the Sub or Function statement and before the procedure’s code.   The following example shows some procedure-only variables declared by using Dim statements:   Sub MySub()   Dim x As Integer   Dim First As Long   Dim PartDimension As Single   Dim myValue ' ...[The procedure’s code goes here]... End Sub    Notice that the last Dim statement in the preceding example doesn’t declare a data type; it declares only the variable itself. The effect is that the variable MyValue is a Variant.   By the way, you can also declare several variables with a single Dim statement, as in the following example:   Dim x As Integer, y As Integer, z As Integer Dim First As Long, Last As Double   Unlike some languages, VBA doesn’t allow you to declare a group of variables to be a particular data type by separating the variables with commas.   For example, though valid, the following statement does not declare all the variables as Integers:   Dim i, j, k As Integer   In this example, only k is declared to be an Integer; the other variables are declared to be Variants.   If you declare a variable with procedure-only scope, other procedures in the same module can use the same variable name, but each instance of the variable is unique to its own procedure.      In general, variables declared at the procedure level are the most efficient because VBA frees up the memory they use when the procedure ends.    Module-only Variables   Sometimes, you want a variable to be available to all procedures in a module.   If so, just declare the variable (using Dim or Private) before the module’s first Sub or Function statement — outside any procedures.   This is done in the Declarations section, at the beginning of your module.   This is also where the Option Explicit statement is located.   Below figure shows how you know when you’re working with the Declarations section.      As shown in above image, I want a variable named swApp, so that it can available to all procedures in this module.   Hence I declare this variable in Declaration section of VBE.   Next post wil be about Public, Static and Variable’s Life.  ","categories": [],
        "tags": ["VBA"],
        "url": "http://localhost:4000/vba/variable-scope/",
        "teaser": null
      },{
        "title": "Public, Static and Variable's Life",
        "excerpt":"In the following sections we will discussed about following topics:           Public Variables            Static Variables            Life of Variables       Let’s look at them one by one.   Public Variables   If you need to make a variable available to all the procedures in all your VBA modules, declare the variable at the module level (in the Declarations section) by using the Public keyword.   For example, in previous figure, if I use Public in place of Dim in declaration section of VBE, then you can use those variables in other procedures of same modules, and for other modules also.   If you would like a variable to be available to other modules, you must declare the variable as Public.   In practice, sharing a variable across modules is hardly ever done.   But I guess it’s nice to know that it can be done.   Static Variables   Normally, when a procedure ends, all the procedure’s variables are reset.   Static variables are a special case because they retain their value even when the procedure ends.   You declare a static variable at the procedure level.   A static variable may be useful if you need to track the number of times you execute a procedure.   Life of Variables   Nothing lives forever, including variables.   The scope of a variable not only determines where that variable may be used, it also affects under which circumstances the variable is removed from memory.   You can purge (remove) all variables from memory by using three methods:           Click the Reset toolbar button (the little blue square button on the Standard toolbar in previous figure).            Click End when a runtime error message dialog box shows up.            Include an End statement anywhere in your code. This is not the same as an End Sub or End Function statement. Generally it is an Exit statement.       Otherwise, only procedure-level variables will be removed from memory when the macro code has completed running.   Static variables, module level variables, and global (public) variables all retain their values in between runs of your code.      If you use module-level or global-level variables, make sure they have the value you expect them to have. You never know whether one of the situations I just mentioned may have caused your variables to lose their content!    Next post will be about VBA Constants.  ","categories": [],
        "tags": ["VBA"],
        "url": "http://localhost:4000/vba/publc-static-variable-life/",
        "teaser": null
      },{
        "title": "VBA Constants",
        "excerpt":"A variable’s value may (and usually does) change while your procedure is executing.   That’s why they call it a variable.   Sometimes you need to refer to a value or string that never changes.   In such a case, you need a constant — a named element whose value doesn’t change.   As shown in the following examples, you declare constants by using the Const statement.   The declaration statement also gives the constant its value:   Const BlockLength As Integer = 4. Const BlockThickness = .5 Const PartName As String = \"Part Name:\" Public Const AppName As String = \"Part Calculation\"   Using constants in place of hard-coded values or strings is an excellent programming practice.   For example, if your procedure needs to refer to a specific value (such as sheet thickness) several times.   It is better to declare the value as a constant and refer to its name rather than the value.   This makes your code more readable and easier to change.   When sheet thickness changes, you have to change only one statement rather than several.   Like variables, constants have a scope. Keep these points in mind:      To make a constant available within only a single procedure, declare the constant after the procedure’s Sub or Function statement.   To make a constant available to all procedures in a module, declare the constant in the Declarations section for the module.   To make a constant available to all modules, use the Public keyword and declare the constant in the Declarations section of any module.   If you attempt to change the value of a constant in a VBA routine, you get an error.   This isn’t too surprising because a Constant is constant.   Unlike a variable, the value of a constant does not vary.   If you need to change the value of a constant while your code is running, what you really need is a variable.   Pre-made constants   Your CAD Application and VBA contain many predefined constants, which you can use without the need to declare them yourself.   The macro recorder (in Solidworks) usually uses constants rather than actual values.   In general, you don’t need to know the value of these constants to use them.   The following simple procedure uses a built-in constant swDefaultTemplatePart to select the default part template while opening a new file.   set swPart = swApp.NewDocument(swApp.GetUserPreferenceStringValue _     (swUserPreferenceStringValue_e.swDefaultTemplatePart),0,0,0)   In above example, Solidworks did not record these constants.   It simply generates the direct path to open part document.   To find the actual value of a built-in constant, use the “Immediate window” in the VBE, and execute a VBA statement such as the following:   ?swDefaultTemplatePart      If the Immediate window isn’t visible, press Ctrl+G. The question mark is a shortcut for typing Print.    Next post will be about VBA Strings Basics.   ","categories": [],
        "tags": ["VBA"],
        "url": "http://localhost:4000/vba/constant/",
        "teaser": null
      },{
        "title": "VBA String Basics",
        "excerpt":"The String data type represents a series of characters. This topic introduces the basic concepts of strings in Visual Basic.   String Variables   An instance of a string can be assigned a value that represents a series of characters as shown in below example:   Dim MyString As String MyString = \"This is an example of the String data type\"   A String variable can also accept any expression that evaluates to a string as shown in below example:   Dim OneString As String Dim TwoString As String OneString = \"one, two, three, four, five\" TwoString = OneString.Substring(5, 3) ' Output -&gt; \"two\".  OneString = \"1\" TwoString = OneString &amp; \"1\" ' Output -&gt; \"11\".   Any literal that is assigned to a String variable must be enclosed in quotation marks (“”).   This means that a quotation mark (“”) within a string cannot be represented by a quotation mark.   For example, the following code causes a compiler error:   Dim myString As String  ' This line would cause an error. myString = \"He said, \"Look at this example!\"\"   This code causes an error because the compiler terminates the string after the second quotation mark, and the remainder of the string is interpreted as code.   This means compiler think He said,  is a string and Look at this example! as a VB code.   But we want compiler to know that we want He said, \"Look at this example!\" as a string value.   To solve this problem, Visual Basic interprets two quotation marks in a string literal as one quotation mark in the string.   The following example shows the correct way to include a quotation mark in a string:   ' The value of myString is: He said, \"Look at this example!\" myString = \"He said, \"\"Look at this example!\"\" \"   In the preceding example, the two quotation marks before and after the word Look become one quotation mark in the string.   The Immutability of Strings   A string is immutable, which means its value cannot be changed once it has been created.   However, this does not prevent us from assigning more than one value to a string variable as shown in below example:   Dim myString As String = \"This string is immutable\" myString = \"Or is it?\"   Here, a string variable is created, given a value, and then its value is changed.   In the first line, an instance of type String is created and given the value This string is immutable.   In the second line of the example, a new instance is created and given the value Or is it?, and the string variable discards its reference to the first instance and stores a reference to the new instance.   Unlike other intrinsic data types, String is a reference type.   When a variable of reference type is passed as an argument to a function or subroutine, a reference to the memory address where the data is stored is passed instead of the actual value of the string.   So in the previous example, the name of the variable remains the same, but it points to a new and different instance of the String class, which holds the new value.   Next post will be about VBA Assignment Statements And Operators.   ","categories": [],
        "tags": ["VBA"],
        "url": "http://localhost:4000/vba/vba-string-basic/",
        "teaser": null
      },{
        "title": "VBA Assignment Statements And Operators",
        "excerpt":"An assignment statement is a VBA statement that assigns the result of an expression to a variable or an object.   In a book I read Excel’s Help system defines the term expression as:      “Combination of keywords, operators, variables, and constants that yields a string, number, or object. An expression can be used to perform a calculation, manipulate characters, or test data.”    Much of your work in VBA involves developing (and debugging) expressions.   If you know how to create simple formulas in Excel, you’ll have no trouble creating expressions.   With a formula, Excel displays the result in a cell.   A VBA expression, on the other hand, can be assigned to a variable.      For understanding purpose, I used Excel as an example. Please don’t get confused with it.    In the assignment statement examples that follow, the expressions are to the right of the equal sign:   X = 1 X = x + 1 X = (y * 2) / (z * 2) NumberOfParts = 15 SelectObject = True   Expressions can be as complex as you need them to be; use the line continuation character (a space followed by an underscore) to make lengthy expressions easier to read.   Operators   As you can see in the VBA uses the equal sign as its assignment operator.   You’re probably accustomed to using an equal sign as a mathematical symbol for equality.   Therefore, an assignment statement like the following may cause you to raise your eyebrows:   x = x + 1   How can the variable x be equal to itself plus 1?   Answer: It can’t.   In this case, the assignment statement is increasing the value of x by 1.   Just remember that an assignment uses the equal sign as an operator, not a symbol of equality.   Smooth Operators   Operators play a major role in VBA. Besides the assignment operator i.e. equal sign (discussed in the previous topic), VBA provides several other operators.   Below table lists these operators.                 VBA’s Operators                   Function         Operator Symbol                   Addition         +                   Multiplication         *                   Division         /                   Subtraction         -                   Exponentiation         ^                   String concatenation         &#38;                   Integer division (the result is always an integer)         \\                   Modulo arithmetic (returns the remainder of a division operation)         Mod        The term concatenation is programmer speak for “join together”.   Thus, if you concatenate strings, you are combining strings to make a new and improved string.   VBA also provides a full set of logical operators. Below table, shows some of logical operators.                 VBA’s Logical Operators                   Operator         What is does                   Not         Performs a logical negation on an expression.                   And         Performs a logical conjunction on two expressions.                   Or         Performs a logical disjunction on two expressions.                   XoR         Performs a logical exclusion on two expressions.                   Eqv         Performs a logical equivalence on two expressions.                   Imp         Performs a logical implication on two expressions.        The precedence order for operators in VBA is exactly the same as in Excel formulas.   Exponentiation has the highest precedence. multiplication and division come next, followed by addition and subtraction.   You can use parentheses to change the natural precedence order, making whatever’s operation in parentheses come before any operator.   Take a look at this code:   z = x + 5 * y   When this code is executed, what’s the value of z?   If you answered 13, you get a gold star that proves you understand the concept of operator precedence.   If you answered 16, read this: The multiplication operation (5 * y) is performed first, and that result is added to x.   If you answered something other than 13 or 16, I have no comment.   By the way, I can never remember how operator precedence works, so I tend to use parentheses even when they aren’t required.   For example, in real life I would write that last assignment statement like this:   z = x + (5 * y)      Don’t be shy about using parentheses even if they aren’t required — especially if doing so makes your code easier to understand. VBA doesn’t care if you use extra parentheses.    Next post will be about VBA Arrays.   ","categories": [],
        "tags": ["VBA"],
        "url": "http://localhost:4000/vba/assignment-statement-and-operator/",
        "teaser": null
      },{
        "title": "VBA Arrays",
        "excerpt":"Most programming languages support arrays. An array is a group of variables that share a common name.   You refer to a specific variable in the array by using the array name and an index number in parentheses.   For example, you can define an array of 12 string variables to hold the names of the months of the year.   If you name the array MonthNames, you can refer to the first element of the array as MonthNames(1), the second element as MonthNames(2), and so on.   Dim MonthNames(\"Jan\", \"Feb\", \"Mar\", \"April\", \"May\", \"Jun\", \"July\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\") As string print(MonthNames(1))    'print Feb   Declaring Arrays   Before you can use an array, you must declare it. No exceptions.   Unlike normal variables, VBA is very strict about this rule.   You declare an array with a Dim or Public statement, just as you declare a regular variable.   However, you also need to specify the number of elements in the array.   You do this by specifying the first index number, the keyword To, and the last index number — all inside parentheses.   The following example shows how to declare an array of 100 integers:   Dim MyArray(1 To 100) As Integer   When you declare an array, you can choose to specify only the upper index.   VBA assumes that 0 is the lower index. Therefore, both of the following statements declare the same 101-element array:   Dim MyArray(1 To 100) As Integer Dim MyArray(1 To 100)   If you want VBA to assume that 1 (rather than 0) is the lower index for your arrays, include the following statement in the Declarations section of your module:   Option Base 1   This statement forces VBA to use 1 as the first index number for arrays that declare only the upper index.   If above statement is present, the following statements are identical, both declaring a 100-element array:   Dim MyArray(1 To 100) As Integer Dim MyArray(1 To 100)   There are two other arrays           Multi-dimensional array            Dynamic array       But I don’t think these two are that much useful for use to learn hence we will not delve into them.   Next post will be about VBA Functions.   ","categories": [],
        "tags": ["VBA"],
        "url": "http://localhost:4000/vba/arrays/",
        "teaser": null
      },{
        "title": "VBA Functions",
        "excerpt":"A function essentially performs a calculation and returns a single value.   The SUM function in MS Excel returns the sum of a range of values.   The same holds true for functions used in your VBA expressions: Each function does its thing and returns a single value.   The functions you use in VBA can come from two sources:      Built-in functions provided by VBA   Custom functions that you (or someone else) write, using VBA.   Built-In VBA Functions   VBA provides numerous built-in functions. Some of these functions take arguments and some do not.   I present a few examples of VBA functions in code.   In many of these examples, I use the MsgBox function to display a value in a message box.   Yes, MsgBox is a VBA function — a rather unusual one, but a function nonetheless.   This useful function displays a message in a pop-up dialog box.   Displaying the system date or time   The first example uses VBA’s Date function to display the current system date in a message box:   Sub ShowDate()   MsgBox Date End Sub   Notice that the Date function doesn’t use an argument.   A VBA function with no argument doesn’t require an empty set of parentheses.   In fact, if you type an empty set of parentheses, the VBE will promptly remove them.   To get the system time, use the Time function. And if you want it all, use the Now function to return both the date and the time.   Sub ShowDate()   MsgBox Now End Sub   Finding a string length   The following procedure uses the VBA’s Len function, which returns the length of a text string.   The Len function takes one argument: the string.   When you execute this procedure, the message box displays 11 because the argument has 11 characters.   Sub StringLength()   Dim MyString As String   Dim StringLength As Integer   MyString = “Hello World”   StringLength = Len(MyString)   MsgBox StringLength End Sub   Displaying the integer part of a number   The following procedure uses the Fix function, which returns the integer portion of a value — the value without any decimal digits:   Sub GetIntegerPart()   Dim MyValue As Double   Dim IntValue As Integer   MyValue = 123.456   IntValue = Fix(MyValue)   MsgBox IntValue End Sub   In this case, the message box displays 123.   VBA has a similar function called Int Function.   The difference between Int and Fix is how each deals with negative numbers.   It’s a subtle difference, but sometimes it’s important.   Int Function returns the first negative integer that’s less than or equal to the argument. Int(-123.456) returns -124.   Fix Function returns the first negative integer that’s greater than or equal to the argument. Fix(-123.456) returns -123.   Determining a file size   The following Sub procedure displays the size, in bytes, of the executable file.   It finds this value by using the FileLen function.   Sub GetFileSize()   Dim TheFile As String   TheFile “C:\\ProgramFiles\\Program File\\SolidworksCorp\\SLDWORKS\\SLDWORKS.exe”   MsgBox FileLen(TheFile) End Sub   Notice that this routine hard codes the filename (that is, it explicitly states the path).   Generally, this isn’t a good idea. The file might not be on the C drive, or the Program File folder may have a different location.   The following statement shows a better approach:   TheFile = Application.Path &amp; “\\SLDWORKS.EXE”    Path is a property of the Application object.   It simply returns the name of the folder in which the application (that is, Solidworks) is installed (without a trailing backslash).   Identifying the type of a selected object   The following procedure uses the TypeName function, which returns the type of the selection (as a string):   Sub ShowSelectionType()   Dim SelType As String   SelType = TypeName(Selection)   MsgBox SelType End Sub   This could be a Sketch, a Part, a Assembly or any other type of object that can be selected.   The TypeName function is very versatile. You can also use this function to determine the data type of a variable.   Next post will be about VBA Functions that do more.  ","categories": [],
        "tags": ["VBA"],
        "url": "http://localhost:4000/vba/functions/",
        "teaser": null
      },{
        "title": "VBA Functions that do more",
        "excerpt":"A few VBA functions go above and beyond the call of duty. Rather than simply return a value, these functions have some useful side effects.   Below table lists them.                 Functions with Useful Side Benefits                   Function         What is does                   MsgBox                      Displays a handy dialog box containing a message and buttons.              The function returns a code that identifies which button the user clicks.                            InputBox                      Displays a simple dialog box that asks the user for some input.              The function returns whatever the user enters into the dialog box.                            Shell                      Executes another program. The function returns the task ID (a unique identifier)              of the other program (or an error if the function can’t start the other program).                            GetObject/CreateObject                      Returns/Create a reference to an object provided by an ActiveX component.              (If you don't understand, don't bother about it. Just remember we use this              function to for checking &#38; creating objects in later topics)                   Discovering VBA functions   How do we find out which function does VBA provides?   The best source is the Visual Basic Help system in build in your CAD Application.   I compiled a partial list of functions, which I share with you in following Table.   I omitted some of the more specialized or obscure functions.   For complete details on a particular function, type the function name into a VBA module, move the cursor anywhere in the text, and press F1.                 VBA’s Most Useful Built-In Functions                   Function         What is does                   Abs         Returns a number’s absolute value.                   Array         Returns a variant containing an array.                   Asc         Converts the first character of a string to its ASCII value.                   Atn         Returns the arctangent of a number.                   Choose         Returns a value from a list of items.                   Chr         Converts an ANSI value to a string.                   Cos         Returns a number’s cosine.                   CurDir         Returns the current path.                   Date         Returns the current system date.                   DateAdd         Returns a date to which a specified time interval has been added — for example, one month from a particular date.                   DatePart         Returns an integer containing the specified part of a given date — for example, a date’s day of the year.                   DateSerial         Converts a date to a serial number.                   DateValue         Converts a string to a date.                   Day         Returns the day of the month from a date value.                   Dir         Returns the name of a file or directory that matches a pattern.                   Erl         Returns the line number that caused an error.                   Err         Returns the error number of an error condition.                   Error         Returns the error message that corresponds to an error number.                   Exp         Returns the base of the natural logarithm (e) raised to a power.                   FileLen         Returns the number of bytes in a file.                   Fix         Returns a number’s integer portion.                   Format         Displays an expression in a particular format.                   GetSetting         Returns a value from the Windows registry.                   Hex         Converts from decimal to hexadecimal.                   Hour         Returns the hours portion of a time.                   InputBox         Displays a box to prompt a user for input.                   InStr         Returns the position of a string within another string.                   Int         Returns the integer portion of a number.                   IPmt         Returns the interest payment for an annuity or loan.                   IsArray         Returns True if a variable is an array.                   IsDate         Returns True if an expression is a date.                   IsEmpty         Returns True if a variable has not been initialized.                   IsError         Returns True if an expression is an error value.                   IsMissing         Returns True if an optional argument was not passed to a procedure.                   IsNull         Returns True if an expression contains no valid data.                   IsNumeric         Returns True if an expression can be evaluated as a number.                   IsObject         Returns True if an expression references an OLE Automation object.                   LBound         Returns the smallest subscript for a dimension of an array.                   LCase         Returns a string converted to lowercase.                   Left         Returns a specified number of characters from the left of a string.                   Len         Returns the number of characters in a string.                   Log         Returns the natural logarithm of a number to base.                   LTrim         Returns a copy of a string, with any leading spaces removed.                   Mid         Returns a specified number of characters from a string.                   Minutes         Returns the minutes portion of a time value.                   Month         Returns the month from a date value.                   MsgBox         Displays a message box and (optionally) returns a value.                   Now         Returns the current system date and time.                   RGB         Returns a numeric RGB value representing a color.                   Replace         Replaces a substring in a string with another substring.                   Right         Returns a specified number of characters from the right of a string.                   Rnd         Returns a random number between 0 and 1.                   RTrim         Returns a copy of a string, with any trailing spaces removed.                   Second         Returns the seconds portion of a time value.                   Sgn         Returns an integer that indicates a number’s sign.                   Shell         Runs an executable program.                   Sin         Returns a number’s sine.                   Space         Returns a string with a specified number of spaces.                   Split         Splits a string into parts, using a delimiting character.                   Sqr         Returns a number’s square root.                   Str         Returns a string representation of a number.                   StrComp         Returns a value indicating the result of a string comparison.                   String         Returns a repeating character or string.                   Tan         Returns a number’s tangent.                   Time         Returns the current system time.                   Timer         Returns the number of seconds since midnight.                   TimeSerial         Returns the time for a specified hour, minute, and second.                   TimeValue         Converts a string to a time serial number.                   Trim         Returns a string without leading or trailing spaces.                   TypeName         Returns a string that describes a variable’s data type.                   UBound         Returns the largest available subscript for an array’s dimension.                   UCase         Converts a string to uppercase.                   Val         Returns the numbers contained in a string.                   VarType         Returns a value indicating a variable’s subtype.                   Weekday         Returns a number representing a day of the week.                   Year         Returns the year from a date value.        ","categories": [],
        "tags": ["VBA"],
        "url": "http://localhost:4000/vba/more-functions/",
        "teaser": null
      },{
        "title": "Controlling Program Flow and Making Decisions",
        "excerpt":"Some VBA procedures start at the code’s beginning and progress line by line to the end, never deviating from this top-to-bottom program flow.   Macros that you record always work like this.   In many cases, however, you need to control the flow of your code by skipping over some statements, executing some statements multiple times, and testing conditions to determine what the procedure does next.   Some programming newbies can’t understand how a dumb computer can make intelligent decisions.   The secret is in several programming constructs that most programming languages support.   Following table provides a quick summary of these constructs.                 Programming Constructs for Making Decisions                   Construct         How it works                   If-Then structure                      Does something if something else is true.                            Select Case                      Does any of several things, depending on something’s value.                            For-Next loop                      Executes a series of statements a specified number of times.                            Do-While loop                      Does something as long as something else remains true.                            Do-Until loop                      Does something until something else becomes true.                 Next post will be about If-Then-Else and Select Case structure.  ","categories": [],
        "tags": ["VBA"],
        "url": "http://localhost:4000/vba/controlling-flow-making-desicions/",
        "teaser": null
      },{
        "title": "If-Then-Else and Select Case structure",
        "excerpt":"If-Then is VBA’s most important control structure. You’ll probably use this command on a daily basis.   As in many other aspects of life, effective decision-making is the key to success in writing CAD or any other macros.   The If-Then structure has this basic syntax:   If condition Then statements [Else elsestatements]   Use the If-Then structure when you want to execute one or more statements conditionally.   The optional Else clause, if included, lets you execute one or more statements if the condition you’re testing is not true.   Sound confusing? Don’t worry; a few examples make this crystal clear.   If-Then examples   The following routine demonstrates the If-Then structure without the optional Else clause:   Sub GoodMorning()   If Time &lt; 0.5 Then MsgBox “Good Morning.” End Sub   The GoodMorning procedure uses VBA’s Time function to get the system time.   If the current system time is less than .5 (in other words, before noon), the routine displays a friendly greeting.   If Time is greater than or equal to .5, the routine ends and nothing happens.   To display a different greeting if Time is greater than or equal to .5, add another If-Then statement after the first one:   Sub GoodMorning2()   If Time &lt; 0.5 Then MsgBox “Good Morning.”   If Time &gt;= 0.5 Then MsgBox “Good Afternoon.” End Sub   Notice that I used &gt;= (greater than or equal to) for the second If-Then statement.   This ensures that the entire day is covered. Had I used &gt; (greater than), then no message would appear if this procedure were executed at precisely 12:00 noon.   If-Then-Else examples   Another approach to the preceding problem uses the Else clause.   Here’s the same routine recoded to use the If-Then-Else structure:   Sub GoodMorning3()   If Time &lt; 0.5 Then MsgBox “Good Morning.” Else _   MsgBox “Good Afternoon.” End Sub   Notice that I use the line continuation character (underscore) in the preceding example.   The If-Then-Else statement is actually a single statement.   VBA provides a slightly different way of coding If-Then-Else constructs that use an End-If statement.   Therefore, the GoodMorning procedure can be rewritten as:   Sub GoodMorning4()   If Time &lt; 0.5 Then     MsgBox “Good Morning.”   Else     MsgBox “Good Afternoon.”   End If End Sub   In fact, you can insert any number of statements under the If part, and any number of statements under the Else part.   I prefer to use this syntax because it’s easier to read and makes the statements shorter.   What if you need to expand the GoodMorning routine to handle three conditions: morning, afternoon, and evening?   You have two options: Use three If-Then statements or use a nested If-Then-Else structure.   Nesting means placing an If-Then-Else structure within another If-Then-Else structure.   The first approach, the three statements, is simplest:   Sub GoodMorning5()   If Time &lt; 0.5 Then Msg = “Morning.”   If Time &gt;= 0.5 And Time &lt; 0.75 Then Msg = “Afternoon.”   If Time &gt;= 0.75 Then Msg = “Evening.”   MsgBox “Good” &amp; Msg End Sub   The Msg variable gets a different text value, depending on the time of day.   The final MsgBox statement displays the greeting: Good Morning, Good Afternoon, or Good Evening.   The following routine performs the same action but uses an If-Then-End If structure:   Sub GoodMorning6()   Dim Msg As String   If Time &lt; 0.5 Then     Msg = “Morning.”   If Time &gt;= 0.5 And Time &lt; 0.75 Then     Msg = “Afternoon.”   If Time &gt;= 0.75 Then     Msg = “Evening.”   End If   MsgBox “Good” &amp; Msg End Sub   If-ElseIf-Else examples   In the previous examples, every statement in the routine is executed — even in the morning.   A more efficient structure would exit the routine as soon as a condition is found to be true.   In the morning, for example, the procedure should display the Good Morning message and then exit — without evaluating the other superfluous conditions.   With a tiny routine like this, you don’t have to worry about execution speed.   But for larger applications in which speed is important, you should know about another syntax for the If-Then structure.   The ElseIf syntax follows:   If condition Then [statements] [Else condition-n Then [elseifstatements]] [Else [elsestatements]]   Here’s how you can rewrite the GreetMe routine by using this syntax:   Sub GoodMorning7()   Dim Msg As String   If Time &lt; 0.5 Then     Msg = “Morning.”   ElseIf Time &gt;= 0.5 And Time &lt; 0.75 Then     Msg = “Afternoon.”   Else     Msg = “Evening.”   End If   MsgBox “Good” &amp; Msg End Sub   When a condition is true, VBA executes the conditional statements and the If structure ends.   In other words, VBA doesn’t waste time evaluating the extraneous conditions, which makes this procedure a bit more efficient than the previous examples.   The trade-off (there are always trade-offs) is that the code is more difficult to understand. (Of course, you already knew that.)   Select Case structure   The Select Case structure is useful for decisions involving three or more options (although it also works with two options, but using If-Then-Else structure is more efficient for that).   The syntax for the Select Case structure follows:   Select Case testexpression [Case expressionlist-n    [statements-n]] [Case Else   [elsestatements]] End Select   Don’t be scared off by this official syntax. Using the Select Case structure is quite easy.   Select Case example   The following example shows how to use the Select Case structure.   This also shows another way to code the examples presented in the previous section:   Sub SelectPartLength()   Dim PartNumber As Integer   Dim PartLength As Integer   PartNumber = InputBox(“Please Enter part number:”)   Select Case PartNumber     Case Part001       PartLength = 1     Case Part002       PartLength = 2     Case Part003       PartLength = 3   End Select   MsgBox “Part Length for this” &amp; PartNumber &amp; “is” &amp; PartLength End Sub   In this example, the PartNumber variable is being evaluated.   The routine is checking for three different cases.   Next post will be about VBA Looping.  ","categories": [],
        "tags": ["VBA"],
        "url": "http://localhost:4000/vba/if-then-structure-select-case/",
        "teaser": null
      },{
        "title": "VBA Looping",
        "excerpt":"The term looping refers to repeating a block of VBA statements numerous times.   VBA provides various looping command for repeating code to make correct decision making.   We will go through them in following topics:   For -Next Loop   The simplest type of loop is a For-Next loop. Here’s the syntax for this structure:   For counter = start To end [Step stepval] [statements] [Exit For] [statements] Next [counter]   The looping is controlled by a counter variable, which starts at one value and stops at another value.   The statements between the For statement and the Next statement are the statements that get repeated in the loop.   To see how this works, keep reading.   For-Next example   The following example shows a For-Next loop that doesn’t use the optional Step value or the optional Exit For statement.   This routine loops 10 times and uses the VBA MsgBox function to show a number from 1 to 10:   Sub ShowNumbers1()   Dim i As Integer   For i = 1 to 10     MsgBox i   Next i End Sub   In this example, i (the loop counter variable) starts with a value of 1 and increases by 1 each time through the loop.   Because I didn’t specify a Step value the MsgBox method uses the value of i as an argument.   The first time through the loop, i is 1 and the procedure shows a number.   The second time through (i = 2), the procedure show a number, and so on.   Sub ShowNumbers2()   Dim i As Integer Step 2   For i = 1 to 10     MsgBox i   Next i End Sub   Count starts out as 1 and then takes on a value of 3, 5, 7, and 9. The final Count value is 9.   The Step value determines how the counter is incremented. Notice that the upper loop value (9) is not used because the highest value of Count after 9 would be 11, and 11 is larger than 10.   For-Next example with an Exit For statement   A For-Next loop can also include one or more Exit For statements within the loop.   When VBA encounters this statement, the loop terminates immediately.   Here’s the same procedure as in the preceding section, rewritten to insert random numbers.   Sub ShowNumbers3()   Dim i As Integer Step 2   For i = 1 to 10     If i = 5 Then       MsgBox “This is a mid value”       Exit For     End If     MsgBox i   Next i End Sub   This routine performs the as earlier but when the variable i reached to 5, it shows a message, stating that this is a mid value and exit from loop.   Do-While Loop   VBA supports another type of looping structure known as a Do-While loop.   Unlike a For-Next loop, a Do-While loop continues until a specified condition is met.   Here’s the Do-While loop syntax:   ' Do-While Structure Do [While condition]   [statements]   [Exit Do]   [statements] Loop   The following example uses a Do-While loop. This routine uses 1 as a starting point and runs through next numbers.   The loop continues until the routine encounter the condition of i = 8.   ' Do-While Example Sub ShowNumbers4()   Dim i As Integer   Do While i &lt;&gt; 8     MsgBox i     i = i + 1   Loop End Sub   Some people prefer to code a Do-While loop as a Do-Loop While loop.   This example performs exactly as the previous procedure but uses different loop syntax:   ' Do-Loop While Example Sub ShowNumbers5()   Dim i As Integer   Do      MsgBox i     i = i + 1   Loop While i &lt;&gt; 8 End Sub   Here’s the key difference between the Do-While and Do-Loop While loops.   The Do-While loop always performs its conditional test first. If the test is not true, the instructions inside the loop are never executed.   The Do-Loop While loop, on the other hand, always performs its conditional test after the instructions inside the loop are executed.   Thus, the loop instructions are always executed at least once, regardless of the test.   This difference can sometimes have a big effect on how your program functions.   Do-Until Loop   The Do-Until loop structure is similar to the Do-While structure.   The two structures differ in their handling of the tested condition.   A program continues to execute a Do-While loop while the condition remains true.   In a Do-Until loop, the program executes the loop until the condition is true. Here’s the Do-Until syntax:   ' Do-Until Structure Do [Until condition]   [statements]   [Exit Do]   [statements] Loop   The following example is the same one presented for the Do-While loop but recoded to use a Do-Until loop:   Sub ShowNumbers6()   Dim i As Integer   Do Until i &lt;&gt; 8     MsgBox i     i = i + 1   Loop End Sub   Just like with the Do-While loop, you may encounter a different form of the Do-Until loop — a Do-Loop Until loop.   The following example, which has the same effect as the preceding procedure, demonstrates an alternate syntax for this type of loop:   Sub ShowNumbers7() ' Do-Loop Until Example   Dim i As Integer   Do      MsgBox i     i = i + 1   Loop Until i &lt;&gt; 8 End Sub   There is a subtle difference in how the Do-Until loop and the Do-Loop Until loop operate.   In the former, the test is performed at the beginning of the loop, before anything in the body of the loop is executed.   This means that it is possible that the code in the loop body will not be executed if the test condition is met.   In the later version, the condition is tested at the end of the loop.   Therefore, at a minimum, the Do-Loop Until loop always results in the body of the loop being executed once.   Another way to think about it is like this: The Do-While loop keeps looping as long as the condition is true.   The Do-Until loop keeps looping as long as the condition is False.   Looping through a Collection   VBA supports yet another type of looping — looping through each object in a collection of objects.   Please note that I have not covered Object topic so far. For your understanding I give a brief explanation about collection.   A collection is a group of same type of objects.   For example, a drawing file in any CAD application is a collection of Sheets, and each sheet is a collection of drawing views and so on.   When you need to loop through each object in a collection, use the For Each-Next structure. The syntax is   ' For Each-Next Structure For Each element In collection   [statements]   [Exit For]   [statements] Next [element]   The following example loops through each drawing sheet in the active drawing and shows name of each active drawing sheet:   ' For Each-Next Example Option Explicit Dim swApp As SldWorks.SldWorks Dim swPart As SldWorks.ModelDoc2 Dim swDwg As SldWorks.DrawingDoc Dim BoolStatus As Boolean Dim SheetNamesList As Variant Sub ShowSheetName()   Set swApp = Application.SldWorks   Set swPart = swApp.ActiveDoc   Set swDwg = swPart   SheetNamesList = swDwg.GetSheetNames   Dim SheetName As Variant   For Each SheetName In SheetNamesList     MsgBox SheetName   Next SheetName End Sub   In this example, first we get the list of all sheet names in opened drawing, then we loop through each sheet name in collection and show sheet name in a message box.   For this example please notes that we did not need to load all sheet, this code can work on non-activate and non-loaded sheets also.   Next post will be about Bug Finding.   ","categories": [],
        "tags": ["VBA"],
        "url": "http://localhost:4000/vba/looping/",
        "teaser": null
      },{
        "title": "Bug Finding",
        "excerpt":"A bug is an error in your programming. Here I cover the topic of programming bugs — how to identify them and how to remove them from your module.   Types of Bugs   The term program bug, as you probably know, refers to a problem with software.   In other words, if software doesn’t perform as expected, it has a bug.   Fact is, all major software programs have bugs — lots of bugs.   A CAD software like Solidworks itself has hundreds (if not thousands) of bugs.   Fortunately, the vast majority of these bugs are relatively obscure and appear in only very specific circumstances.   When you write non-trivial VBA programs, your code probably will have bugs.   This is a fact of life and not necessarily a reflection of your programming ability. The bugs may fall into any of the following categories:           Logical flaws in your code: You can often avoid these bugs by carefully thinking through the problem your program addresses.            Incorrect context bugs: This type of bug surfaces when you attempt to do something at the wrong time. For example, you may try to update the sketch dimension and there are no sketch is activated.            Extreme-case bugs: These bugs rear their heads when you encounter data you didn’t anticipate, such as very large or very small numbers.            Wrong data types bugs: This type of bug occurs when you try to process data of the wrong type, such as attempting to take the square root of a text string.       Debugging is the process of identifying and correcting bugs in your program.   Developing debugging skills takes time, so don’t be discouraged if this process is difficult at first.   It’s important to understand the distinction between bugs and syntax errors.   A syntax error is a language error. For example, you might misspell a keyword, omit the Next statement in a For-Next loop, or have a mismatched parenthesis.   Before you can even execute the procedure, you must correct these syntax errors.   A program bug is much subtler. You can execute the routine, but it doesn’t perform as expected.   Identifying Bugs   Before you can do any debugging, you must determine whether a bug actually exists.   You can tell that your macro contains a bug if it doesn’t work the way it should. Usually, but not always, you can easily discern this.   A key fact known to all programmers is that bugs often appear when you least expect them.   For example, just because your macro works fine with one data set doesn’t mean you can assume it will work equally as well with all data sets.   Or your macro runs fine in your system but not working properly in your friend’s system.   Such cases happened all the time and are part of debugging.   The best debugging approach is to start with thorough testing, under a variety of real-life conditions.   Because any changes made by your VBA code cannot be undone, it is always a good idea to use a backup copy of your CAD files that you use for testing.   I usually copy some files into a temporary folder and use those files for my testing.   Debugging Techniques   In this section, I discuss the some of the most common methods for debugging VBA code:      Examine your code   Inserting MsgBox functions at various locations in your code   Inserting Debug.Print statement   Examine your code   Perhaps the most straightforward debugging technique is simply taking a close look at your code to see whether you can find the problem.   If you’re lucky, the error jumps right out, and you can fix the problem.   Notice I said, “If you’re lucky.” That’s because often you discover errors when you have been working on your program for long hours and you are running on caffeine and willpower.   At times like that, you are lucky if you can even see your code.   Thus, don’t be surprised if simply examining your code isn’t enough to make you find and expunge all the bugs it contains.   Using the MsgBox function   A common problem in many programs involves one or more variables not taking on the values you expect.   In such cases, monitoring the variable(s) while your code runs is a helpful debugging technique.   One way to do this is by inserting temporary MsgBox functions into your routine.   For example, I used MsgBox function to check conditions. Whenever I use If-Else statement, I put one message in If condition and put another message in Else condition.   By this way, I make sure condition which I want is working correct or not.   Feel free to use MsgBox functions frequently when you debug your code.   Just make sure that you remove them after you identify and correct the problem.   Inserting Debug.Print Statement   As an alternative to using MsgBox functions in your code, you can insert one or more temporary Debug.Print statements.   Use these statements to print the value of one or more variables in the Immediate window.   Here’s an example that displays a message of “This condition is working fine”.   If swPart Is Nothing Then   Debug.Print \"This condition is working fine.\"   If VBE’s Immediate window is not visible, press Ctrl+G.   Unlike MsgBox, Debug.Print statements do not halt your code.   So you’ll need to keep an eye on the Immediate window to see what’s going on.   After you’ve debugged your code, be sure to remove all the Debug.Print statements.   Next post will be about VBA Debugger.   ","categories": [],
        "tags": ["VBA"],
        "url": "http://localhost:4000/vba/bug-finding/",
        "teaser": null
      },{
        "title": "VBA Debugger",
        "excerpt":"In this section, I discuss the details of using the VBA debugging tools.   These tools are much more powerful than the techniques I discuss in the previous section.   But along with power comes responsibility. Using the debugging tools takes a bit of setup work.   Setting breakpoints in your code   In earlier sections, I discuss using MsgBox functions in your code to monitor the values of certain variables.   Displaying a message box essentially halts your code in mid-execution, and clicking the OK button resumes execution.   Wouldn’t it be nice if you could halt a routine’s execution, take a look at the value of any of your variables, and then continue execution?   Well, that’s exactly what you can do by setting a breakpoint.   You can set a breakpoint in your VBA code in several ways:      Move the cursor to the statement at which you want execution to stop; then press F9.   Click in the gray margin to the left of the statement at which you want execution to stop. This is I used mainly.   Position the insertion point in the statement at which you want execution to stop. Then use the Debug -&gt; Toggle Breakpoint command.   Right-click a statement and choose Toggle -&gt; Breakpoint from the shortcut menu.   The results of setting a breakpoint are shown in below figure.   VBE highlights the line to remind you that you set a breakpoint there; it also inserts a large dot in the gray margin.      When you execute the procedure, VBE goes into Break mode before the line with the breakpoint is executed.   In Break mode, the word break is displayed in the VBE title bar.   To get out of Break mode and continue execution, press F5 or click the Run Sub/UserForm button in the VBE toolbar.   To quickly remove a breakpoint, click the large dot in the gray margin or move the cursor to the highlighted line and press F9.   To remove all breakpoints in the module, press Ctrl+Shift+F9.   What is Break mode? You can think of it as a state of suspended animation.   Your VBA code stops running and the current statement is highlighted in bright yellow. In Break mode, you can      Type VBA statements in the Immediate window.   Press F8 to step through your code one line at a time to check various things while the program is paused.   Move the mouse pointer over a variable to display its value in a small pop-up window.   Skip the next statement(s) and continue execution there (or even go back a couple of statements).   Edit a statement and then continue.   Below figure shows some debugging action.   A breakpoint is set (notice the big dot), and I’m using the F8 key to step through the code line by line (notice the arrow that points to the current statement).   I used the Immediate window to print Hello world.      Using the Immediate window   The Immediate window may not be visible in the VBE.   You can display the VBE’s Immediate window at any time by pressing Ctrl+G.   In Break mode, the Immediate window is particularly useful for finding the current value of any variable in your program.   For example, if you want to know the current value of a variable, enter the following in the Immediate window and press Enter.   The Immediate window lets you do other things besides check variable values.   For example, you can change the value of a variable, try for a new condition.   Just make sure that the command you enter is a valid VBA statement.   Stepping through your code   While in Break mode, you can also step through your code line by line.   One statement is executed each time you press F8.   Throughout this line-by-line execution of your code, you can activate the Immediate window at any time to check the status of your variables.   You can use your mouse to change which statement VBA will execute next.   If you put your mouse pointer in the gray margin to the left of the currently highlighted statement (which will usually be yellow), your pointer changes to a right-pointing arrow.   Simply drag your mouse to the statement you want done next and watch that statement turn yellow.   Using the Watch window   In some cases, you may want to know whether a certain variable or expression takes on a particular value.   For example, suppose that a procedure loops through 1,000 times.   You notice that a problem occurs during the 800th iteration of the loop.   Well, you could insert a breakpoint in the loop, but that would mean responding to 799 prompts before the code finally gets to the iteration you want to see (and that gets boring real fast).   A more efficient solution involves setting a watch expression.   For example, you can create a watch expression that puts the procedure into Break mode whenever a certain variable takes on a specific value — for example, AnyNumber=800.   To create a watch expression, choose Debug -&gt; Add Watch to display the Add Watch dialog box. See below figure.      The Add Watch dialog has three parts:           Expression: Enter a valid VBA expression or a variable here. For example, AnyNumber=900 or just AnyNumber.            Context: Select the procedure and the module you want to watch. Note that you can select All Procedures and All Modules.            Watch Type: Select the type of watch by clicking an option button. Your choice here depends on the expression you enter. The first choice, Watch Expression, does not cause a break; it simply displays the expression’s value when a break occurs.       Execute your procedure after setting up your watch expression(s).   Things run normally until your watch expression is satisfied (based on the Watch Type you specified).   When that happens, VBE enters Break mode (you did set the Watch Type to “Break When Value Is True,” didn’t you?).   From there, you can step through the code or use the Immediate window to debug your code.   When you create a watch, VBE displays the Watches window shown in below figure.   This window displays the value of all watches that you’ve defined.   In this figure, when the value hit 800, which caused VBE to enter Break mode.      The best way to understand how this Watch business works is to use it and try various options.   Before long, you’ll probably wonder how you ever got along without it.   Using the Locals window   Another useful debugging aid is the Locals window.   You can show this window by choosing View -&gt; Locals Window from the VBE’s menu.   When you are in Break mode, this window will show you a list of all variables that are local to the current procedure (see below figure).   The nice thing about this window is that you don’t have to add a load of watches manually if you want to look at the content of many variables.   The VBE has done all the hard workfor you.      Next post will be about VBA Bug Reduction Tips.  ","categories": [],
        "tags": ["VBA"],
        "url": "http://localhost:4000/vba/debugger/",
        "teaser": null
      },{
        "title": "VBA Bug Reduction Tips",
        "excerpt":"I can’t tell you how to completely eliminate bugs in your programs.   Finding bugs in software can be a profession by itself, but I can provide a few tips to help you keep those bugs to a minimum:           Use an Option Explicit statement at the beginning of your modules. This statement requires you to define the data type for every variable you use. This creates a bit more work for you, but you avoid the common error of misspelling a variable name. And it has a nice side benefit: Your routines run a bit faster.            Format your code with indentation. Using indentations helps delineate different code segments. If your program has several nested For-Next loops, for example, consistent indentation helps you keep track of them all.            Use lots of comments. Nothing is more frustrating than revisiting code you wrote six months ago and not having a clue as to how it works. By adding a few comments to describe your logic, you can save lots of time down the road.            Keep your Sub and Function procedures simple. By writing your code in small modules, each of which has a single, well-defined purpose, you simplify the debugging process.            Use the macro recorder to help identify properties and methods. When I can’t remember the name or the syntax of a property or method, I often simply record a macro and look at the recorded code       Debugging code is not one of my favorite activities, but it’s a necessary evil that goes along with programming.   As you gain more experience with VBA, you spend less time debugging and, when you have to debug, are more efficient at doing so.   Next post will be about VBA Dialog Boxes.   ","categories": [],
        "tags": ["VBA"],
        "url": "http://localhost:4000/vba/bug-reduction-tips/",
        "teaser": null
      },{
        "title": "VBA Dialog Boxes",
        "excerpt":"You can’t use VBA very long without being exposed to dialog boxes.   They seem to pop up almost every time you select a command.   VBA uses dialog boxes to obtain information, clarify commands, and display messages.   If you develop VBA macros, you can create your own dialog boxes that work just like those built in.   Those custom dialog boxes are called UserForms in VBA. About which we look into next section.   UserForm Alternatives   Some of the VBA macros you create behave the same every time you execute them.   For example, you may develop a macro for intermediate steps you do every day.   This macro always produces the same result and requires no additional user input.   You might develop other macros that behave differently under various circumstances or that offer the user options.   In such cases, the macro may benefit from a custom dialog box.   A custom dialog box provides a simple means for getting information from the user.   Your macro then uses that information to determine what it should do.   UserForms can be quite useful, but creating them takes time.   Before I cover the topic of creating UserForms in the next section, you need to know about some potentially timesaving alternatives.   VBA lets you display several different types of dialog boxes that you can sometimes use in place of a UserForm.   You can customize these built-in dialog boxes in some ways, but they certainly don’t offer the options available in a UserForm.   In some cases, however, they’re just what you need.   In the following sections you read about           VBA MsgBox function            VBA InputBox function            VBA GetOpenFilename method            VBA GetSaveAsFilename method            VBA FileDialog method       Next post will be about VBA MsgBox Function.   ","categories": [],
        "tags": ["VBA"],
        "url": "http://localhost:4000/vba/dialog-boxes/",
        "teaser": null
      },{
        "title": "VBA MsgBox Function",
        "excerpt":"You’re probably already familiar with the VBA MsgBox function — I use it quite a bit in the examples.   The MsgBox function, which accepts the arguments shown in below table, is handy for displaying information and getting simple user input.   It’s able to get user input because it’s a function.   A function, as you recall, returns a value.   In the case of the Msgbox function, it uses a dialog box to get the value that it returns.   Keep reading to see exactly how it works.   Here’s a simplified version of the syntax for the MsgBox function:   ' MsgBox Structure MsgBox(prompt[, buttons][, title])                   Arguments       What it does                       prompt       The text your application displays in the message box                 buttons       A number that specifies which buttons (along with what icon) appear in the message box (optional)                 title       The text that appears in the message box’s title bar (optional) displaying a simple message box           You can use the MsgBox function in two ways:      To simply show a message to the user. In this case, you don’t care about the result returned by the function.   To get a response from the user. In this case, you do care about the result returned by the function. The result depends on the button that the user clicks.   If you use the MsgBox function by itself, don’t include parentheses around the arguments.   The following example simply displays a message and does not return a result.   When the message is displayed, the code stops until the user clicks OK.   ' MsgBox function Example Sub main()   MsgBox \"Hello, world!\" End Sub   Below figure shows how this message box looks:      Getting a response from a message box   If you display a message box that has more than just an OK button, you’ll probably want to know which button the user clicks.   The MsgBox function can return a value that represents which button is clicked.   You can assign the result of the MsgBox function to a variable.   In the following code, I use some built-in constants that make it easy to work with the values returned by MsgBox:   ' MsgBox built-in constants Example Sub GetAnswer()   Dim Ans as Integer   Ans = MsgBox (\"Did you eat lunch?\", vbYesNo)   Select Case Ans     Case vbYes     '......[Some code here]....     Case vbNo     '......[Some code here]....   End Select End Sub   Below figure shows how it looks.   When you execute this procedure, the Ans variable is assigned a value of either vbYes or vbNo, depending on which button the user clicks.   The Select Case statement uses the Ans value to determine which action the code should perform.      You can also use the MsgBox function result without using a variable, as the following example demonstrates:   ' MsgBox without variable Sub GetAnswer2()   If MsgBox (\"Continue?\", vbYesNo) = vbYes Then   '......[Some code here]....   Else   '......[Some code here]....   End If End Sub   Customizing message boxes   The flexibility of the buttons argument makes it easy to customize your message boxes.   You can specify which buttons to display, determine whether an icon appears, and decide which button is the default (the default button is “clicked” if the user presses Enter).   Below table lists some of the built-in constants you can use for the buttons argument.   If you prefer, you can use the value rather than a constant (but I think using the built-in constants is a lot easier).                    Constant       Value       What it does                       vbOKOnly       0       Display OK button only.                 vbOKCancel       1       Display OK and Cancel buttons                 vbAbortRetryIgnore       2       Displays Abort, Retry, and Ignore buttons.                 vbYesNoCancel       3       Displays Yes, No, and Cancel buttons.                 vbYesNo       4       Displays Yes and No buttons.                 vbRetryCancel       5       Displays Retry and Cancel buttons.                 vbCritical       16       Displays Critical Message icon.                 vbQuestion       32       Displays Warning Query icon.                 vbExclamation       48       Displays Warning Message icon.                 vbInformation       64       Displays Information Message icon.                 vbDefaultButton1       0       First button is default.                 vbDefaultButton2       256       Second button is default.                 vbDefaultButton3       512       Third button is default.                 vbDefaultButton4       768       Fourth button is default.           For using more than one of these constants as an argument, just connect them with a + operator.   For example, to display a message box with Yes and No buttons and an exclamation icon, use the following expression as the second MsgBox argument:   ' Using multiple MsgBox built-in constants vbYesNo + vbExclamation   Or, if you prefer to make your code less understandable, use a value of 52 (that is, 4 + 48).   The following example uses a combination of constants to display a message box with a Yes button and a No button (vbYesNo) as well as a question mark icon (vbQuestion).   The constant vbDefaultButton2 designates the second button (No) as the default button — that is, the button that is clicked if the user presses Enter.   For simplicity, we assign these constants to the Config variable and then use Config as the second argument in the MsgBox function:   ' Using multiple MsgBox built-in constants Sub GetAnswer3()   Dim Config As Integer   Dim Ans as Integer   Config = vbYesNo + vbQuestion + vbDefaultButton2   Ans = MsgBox(\"Is part opened?\", Config)   If Ans = vbYes Then OpenPart End Sub   Below figure shows the message box application displays when you execute the GetAnswer3 procedure.   If the user clicks the Yes button, the routine executes the procedure named OpenPart (which is not shown).   If the user clicks the No button (or presses Enter), the routine ends with no action.   Because I omitted the title argument in the MsgBox function, our application uses the default title, in my case it is Solidworks.      Previous examples have used constants (such as vbYes and vbNo) for the return value of a MsgBox function.   Besides these two constants, below table lists a few others.                    Constant       Value       What it does                       vbOK       1       User clicked OK.                 vbCancel       2       User clicked Cancel.                 vbAbort       3       User clicked Abort.                 vbRetry       4       User clicked Retry.                 vbIgnore       5       User clicked Ignore.                 vbYes       6       User clicked Yes.                 vbNo       7       User clicked No.           Next post will be about VBA InputBox Function.   ","categories": [],
        "tags": ["VBA"],
        "url": "http://localhost:4000/vba/msgBox-function/",
        "teaser": null
      },{
        "title": "VBA InputBox Function",
        "excerpt":"The VBA’s InputBox function is useful for obtaining a single piece of information from the user.   That information could be a value, a text string, or even a range address.   This is a good alternative to developing a UserForm when you need to get only one value.   InputBox syntax   Here’s a simplified version of the syntax for the InputBox function:   ' InputBox syntax InputBox(prompt[, title][, default])   The InputBox function accepts the arguments listed in below.                    Arguments       What it means                       prompt       The text displayed in the input box.                 Title       The text displayed in the input box’s title bar (optional).                 Default       The default value for the user’s input (optional)           An InputBox example   Here’s an example showing how you can use the InputBox function:   ' InputBox example TheName = InputBox(\"What is your name?\", \"Greetings\")   When you execute this VBA statement, application displays the dialog box shown in below figure.   Notice that this example uses only the first two arguments and does not supply a default value.   When the user enters a value and clicks OK, the routine assigns the value to the variable TheName.      Please note that VBA’s InputBox function always returns a string, so if you need to get a value, your code will need to do some additional checking.   The following example uses the InputBox function to get a number.   It uses the IsNumeric function to check whether the string is a number.   If the string does contain a number, all is fine.   If the user’s entry cannot be interpreted as a number, the code displays a message box.   ' InputBox example Sub GetDrawingSheetNumber()   Dim NumberOfSheets as String   Prompt = \"How many sheets drawing have?\"   NumberOfSheets = InputBox (Prompt)    If NumberOfSheets = \"\" Then Exit Sub   If (IsNumeric)NumberOfSheets Then     '......[Some code here]....     Else     MsgBox \"Please enter a number.\"   End If End Sub   ","categories": [],
        "tags": ["VBA"],
        "url": "http://localhost:4000/vba/inputbox-function/",
        "teaser": null
      },{
        "title": "VBA GetOpenFilename, GetSaveAsFilename and Getting a Folder Name",
        "excerpt":"If your VBA procedure needs to ask the user for a filename, you could use the InputBox function.   An input box usually isn’t the best tool for this job, however, because most users find it difficult to remember paths, backslashes, filenames, and file extensions.   In other words, it’s far too easy to make a typographical error when typing a filename.   For a better solution to this problem, use the GetOpenFilename method of the Application object, which ensures that your code gets its hands on a valid filename, including its complete path.   The GetOpenFilename method displays the familiar Open dialog box.   The GetOpenFilename method doesn’t actually open the specified file.   This method simply returns the user-selected filename as a string.   Then you can write code to do whatever you want with the filename.   Syntax for the GetOpenFilename method   The official syntax for the GetOpenFilename method is as follows:   ' The GetOpenFilename method syntax object.GetOpenFilename ([fileFilter], [filterIndex], [title],[buttonText], [multiSelect])   The GetOpenFilename method takes the optional arguments shown in below Table.                    Arguments       What it does                       FileFilter       Determines the types of files that appear in the dialog box (for example, *.TXT).                 You can specify several different filters from which the user can choose.                         FilterIndex       Determines which of the file filters the dialog box displays by default.                 Title       Specifies the caption for the dialog box’s title bar.                 ButtonText       Ignored                 MultiSelect       If True, the user can select multiple files.           A GetOpenFilename example   The fileFilter argument determines what appears in the dialog box’s Files of Type drop-down list.   This argument consists of pairs of file filter strings followed by the wild card file filter specification, with commas separating each part and pair.   If omitted, this argument defaults to the following:   ' A GetOpenFilename example All Files (*.*), *.*   Notice that this string consists of two parts:   All Files (*.*)   and   *.*   The first part of this string is the text displayed in the Files of Type dropdown list.   The second part determines which files the dialog box displays. For example, . means all files.   The code in the following example brings up a dialog box that asks the user for a filename.   The procedure defines five file filters.   Notice that I use the VBA line continuation sequence to set up the Filter variable; doing so helps simplify this rather complicated argument.   ' A GetOpenFilename example Sub GetImportFileName()   Dim Finfo As String   Dim FilterIndex As Integer   Dim Title As String   Dim FileName As Variant    'Set up list of file filters   If (IsNumeric)NumberOfSheets Then   FInfo = \"Text Files (*.txt),*.txt,\" &amp; _   \"Lotus Files (*.prn),*.prn,\" &amp; _   \"Comma Separated Files (*.csv),*.csv,\" &amp; _   \"ASCII Files (*.asc),*.asc,\" &amp; _   \"All Files (*.*),*.*\"    'Display *.* by default   FilterIndex = 5    'Set the dialog box caption   Title = \"Select a File to Import\"    'Get the filename   FileName = Application.GetOpenFilename (FInfo, FilterIndex, Title)    'Handle return info from dialog box   If FileName = False Then     MsgBox \"No file was selected.\"   Else     MsgBox \"You selected \" &amp; FileName   End If End Sub   Notice that the FileName variable is declared as a Variant data type.   If the user clicks Cancel, that variable contains a Boolean value (False).   Otherwise, FileName is a string. Therefore, using a Variant data type handles both possibilities.   GetSaveAsFilename Method   The GetSaveAsFilename method works just like the GetOpenFilename method, but it displays the Save As dialog box rather than its Open dialog box.   The GetSaveAsFilename method gets a path and filename from the user but doesn’t do anything with it.   It’s up to you to write code that actually saves the file.   The syntax for this method follows:   ' The GetSaveAsFilename method syntax object.GetSaveAsFilename ([InitialFilename], [FileFilter], [FilterIndex], [Title], [ButtonText])   The GetSaveAsFilename method takes below arguments, all of which are optional.                    Arguments       What it does                       InitialFileName       Specifies a default filename that appears in the File Name box.                 FileFilter       Determines the types of files that appear in the dialog box (for example, *.TXT).                 You can specify several different filters from which the user can choose.                         FilterIndex       Determines which of the file filters the dialog box displays by default.                 Title       Specifies the caption for the dialog box’s title bar.           Getting a Folder Name   Sometimes, you don’t need to get a filename; you just need to get a folder name.   If that’s the case, the FileDialog object is just what the doctor ordered.   The following procedure displays a dialog box that allows the user to select a directory.   The selected directory name (or “Canceled”) is then displayed by using the MsgBox function.   ' FileDialog example Sub GetAFolder()   With Application.FileDialog(msoFileDialogFolderPicker)     .InitialFileName = Application.DefaultFilePath &amp; \"\\\"     .Title = \"Please select a location for the backup\"     .Show     If .SelectedItems.Count = 0 Then       MsgBox \"Canceled\"     Else       MsgBox .SelectedItems(1)     End If   End With End Sub   The FileDialog object lets you specify the starting directory by specifying a value for the InitialFileName property.   In this case, the code uses default file path as the starting directory.   Next post will be about VBA UserForms.  ","categories": [],
        "tags": ["VBA"],
        "url": "http://localhost:4000/vba/other-dialogs/",
        "teaser": null
      },{
        "title": "VBA UserForms",
        "excerpt":"A UserForm is useful if your VBA macro needs to get information from a user.   For example, your macro may have some options that can be specified in a UserForm.   If only a few pieces of information are required (for example, a Yes/No answer or a text string), one of the techniques I describe in previous articles may do the job.   But if you need to obtain more information, you must create a UserForm.   To create a UserForm, you usually take the following general steps:           Determine how the dialog box will be used and where it will be displayed in your VBA macro.            Activate the VBE and insert a new UserForm object. A UserForm object holds a single UserForm.            Add controls to the UserForm. Controls include items such as text boxes, buttons, check boxes, and list boxes.            Use the Properties window to modify the properties for the controls or for the UserForm itself.            Write event-handler procedures for the controls (for example, a macro that executes when the user clicks a button in the dialog box). These procedures are stored in the Code window for the UserForm object.            Write a procedure (stored in a VBA module) that displays the dialog box to the user.       When you are designing a UserForm, you are creating what developers call the Graphical User Interface (GUI) to your application.   Take some time to consider what your form should look like and how your users are likely to want to interact with the elements on the UserForm.   Try to guide them through the steps they need to take on the form by carefully considering the arrangement and wording of the controls.   Like most things VBA-related, the more you do it, the easier it gets.   Userforms Working   Each dialog box that you create is stored in its own UserForm object — one dialog box per UserForm.   You create and access these UserForms in the Visual Basic Editor.   Inserting a new UserForm   To insert a UserForm object with the following steps:      In the macro, you can insert User form with following 2 ways:           From “Menu Bar” -&gt; “UserForm”            From “Standard Toolbar” by clicking “Insert UserForm”        The VBE insert a new UserForm object with an empty dialog box.      If “Property window” is not available in your macro, press F4 to display “Property window”.   The VBE inserts a new UserForm object, which contains an empty dialog box.   Below figure shows a UserForm — an empty dialog box with some controls in Toolbox.      Adding controls to a UserForm   When you activate a UserForm, the VBE displays the Toolbox in a floating window, as shown in above figure.   You use the tools in the Toolbox to add controls to your UserForm.   If the Toolbox doesn’t appear when you activate your UserForm, choose View -&gt; Toolbox.   To add a control, just click the desired control in the Toolbox and drag it into the dialog box to create the control.   After you add a control, you can move and resize it by using standard techniques.   Below table indicates the various tools, as well as their capabilities.   To determine which tool is which, hover your mouse pointer over the control and read the small pop-up description.                    Controls       What it does                       Label       Shows text                 TextBox       Determines which of the file filters the dialog box displays by default.                 ComboBox       Display a drop-down list.                 ListBox       Display a list of items.                 CheckBox       Useful for On/off or Yes/No options.                 OptionButton       Used in groups; allows the user to select one of several options.                 ToggleButoon       A button that is either on or off.                 Frame       A container for other control.                 CommandButton       A clickable button.                 TabStrip       Display Tabs                 MultiPage       A tabbed container for other objects.                 ScrollBar       A draggable bar.                 SpinButton       A clickable button often used for changing a value.                 Image       Contains an image                 RefEdit       Allows the user to select a range.           Changing properties for a UserForm control   Every control you add to a UserForm has a number of properties that determine how the control looks or behaves.   In addition, the UserForm itsel also has its own set of properties.   You can change these properties with the Properties window.   Below figure shows the properties window when a CommandButton control is selected:      Properties for controls include the following:      Name   Width   Height   Value   Caption   Each control has its own set of properties (although many controls have some common properties). To change a property using the Properties window:      Make sure that the correct control is selected in the UserForm.   Make sure the Properties window is visible (press F4 if it’s not).   In the Properties window, click on the property that you want to change.   Make the change in the right portion of the Properties window.   If you select the UserForm itself (not a control on the UserForm), you can use the Properties window to adjust UserForm properties      Some of the UserForm properties serve as default settings for new controls you drag onto the UserForm. For example, if you change the Font property for a UserForm, controls that you add will use that same font. Controls that are already on the UserForm are not affected.    Viewing the UserForm Code window   Every UserForm object has a Code module that holds the VBA code (the event-handler procedures) executed when the user works with the dialog box.   To view the Code module, press F7.   The Code window is empty until you add some procedures. Press Shift+F7 to return to the dialog box.   Here’s another way to switch between the Code window and the UserForm display:           Use the View Code and View Object buttons in the Project window’s title bar.            Or right-click the UserForm and choose View Code.       If you’re viewing code, double-click the UserForm name in the Project window to return to the UserForm.   Showing the UserForm   You display a UserForm by using the UserForm’s Show method in a VBA procedure.   The macro that displays the dialog box must be in a VBA module — not in the Code window for the UserForm.   The following procedure displays the dialog box named UserForm1:   ' Showing the UserForm Sub ShowDialogBox()   UserForm.Show   'Other statements can go here End Sub   When Solidworks displays the dialog box, the ShowDialogBox macro halts until the user closes the dialog box.   Then VBA executes any remaining statements in the procedure.   Most of the time, you won’t have any more code in the procedure.   Using information from a UserForm   The VBE provides a name for each control you add to a UserForm.   The control’s name corresponds to its Name property.   Use this name to refer to a particular control in your code.   For example, if you add a CheckBox control to a UserForm named UserForm1, the CheckBox control is named CheckBox1 by default.   The following statement makes this control appear with a check mark:   UserForm1.CheckBox1.Value = True   Most of the time, you write the code for a UserForm in the UserForm’s code module.   If that’s the case, you can omit the UserForm object qualifier and write the statement like this:   CheckBox1.Value = True      I recommend that you change the default name the VBE has given to your controls to something more meaningful.    This will sum-up our tutorials on Visual Basic for Application. From now on I will give tutorials on how to use Solidworks commands with the help of VBA Macro.   If you want to know any explaination on any topic related to VBA, please drop a comment and I will try to give it to you.   Thank you!!!!   UPDATE:   I have started VBA UserForm Example in this tutorials lists.   So if you want to learn how I use these Forms, you can watch them in UserForm Example List Post.    ","categories": [],
        "tags": ["VBA"],
        "url": "http://localhost:4000/vba/userform/",
        "teaser": null
      },{
        "title": "VBA Userforms - Open new Part document",
        "excerpt":"In this post, we learn how can we open a part document from a Visual Basic for Application’s Userform.   For this please we need to do following steps as described below.   Video of Code on YouTube   Please see below video on Solidworks VBA Macro - Open new Part document in Solidwoks VBA Userforms.        Please note that there are no explaination in the video.   Explaination of each line and why we write code this way is given in this post.   Create a new macro   1st we need to create a new macro in Solidworks 3D CAD Software.   If you don’t know how to create a new macro in Solidworks, please go to VBA in Solidworks post for this.   This will open a new macro in Visual Basic Editor with some code as shown in below image.      Insert userform in the macro   After this we need to insert a userform in our macro.   For this, select the button shown in below image.      This button is called insert userform.   As the name suggest, function of this button is inserting a userform.      Please note that in a macro we can insert any number of userform as we like. But for this example we insert only 1 userform.    After clicking the insert userform button we get the userform window as shown in below image.      Adding a Button   Now in our userform window, we add a Command Button at center of window.   You can find Command Button highlighted in red in below image.      You can place command button at your desire. I placed it at center of the userform window as shown in below image.      Updating Properties of Command Button and Userform Windows   Now we update some properties of Command Button and Userform Windows for our use.      It is not necessary to update properties but it is a good habit to update them for our purpose.    1st we update the properties of Userform.   In below image, I have shown the properties of Userform1 and update following properties:           Name of Userform            Caption of Userform          Update the value of Name property from UserForm1 to OurWindow.      From Name property, we access the Userform.    Update the value of Caption property from UserForm1 to Our Window.      From Caption property, we update the text appears in the window of our Userform.    Now, we repeat the same process for Command Button.   1st we need to select the Command Button in the user form after that we update same properties of Command Button.           Name of Command Button            Caption of Command Button       Update the value of Name property from CommandButton1 to OpenNewPartButton.      From Name property, we access the Command Button.    Update the value of Caption property from CommandButton1 to Open NewPart Button.      From Caption property, we update the text appears in the Command Button of our Userform.    Add Functionality to Open NewPart Button   To add functionality in our Open NewPart Button, just double click the Open NewPart Button.   This will add give some code behind the designer and opens the code window of Userform designer.   Private Sub OpenNewPartButton_Click()  End Sub   We need to update this code for opening new part after clicking the button.   For this replace all above code with below code.   Option Explicit  ' Creating variable for Solidworks application Dim swApp As SldWorks.SldWorks ' Creating variable for Solidworks document Dim swDoc As SldWorks.ModelDoc2  ' Private function of Open New Part Button  Private Sub OpenNewPartButton_Click()      ' Setting Solidworks variable to Solidworks application     Set swApp = Application.SldWorks          ' Creating string type variable for storing default part location     Dim defaultTemplate As String     ' Setting value of this string type variable to \"Default part template\"     defaultTemplate = swApp.GetUserPreferenceStringValue(swUserPreferenceStringValue_e.swDefaultTemplatePart)      ' Setting Solidworks document to new part document     Set swDoc = swApp.NewDocument(defaultTemplate, 0, 0, 0)  End Sub   The above code will open New part document when we click the button.   But first, we need to call the our Userform inside main module.   For this goto main Sub procedure inside the main Module.   Code inside the main Module is as given below.   Dim swApp As Object Sub main()  Set swApp = Application.SldWorks End Sub   To call our Userform, replace above code with below code:   ' Main function of our VBA program Sub main()     ' Calling our window to show     OurWindow.Show End Sub   Above function call our window to appears on screen.   When the window appears on screen, we hit the button.   After hitting the button, the code behind the userform run, which opens a new Part document.   If you want to know more about how we open new part with macro please see Open new Part document.   That’s it for now.   Hope you learn some use of Userforms and by this post you can get the idea how they works.   I will provide more tutorials on using of Userform time to time.   Till then do come to visit this blog.   Till then, Happy learning!!!   ","categories": [],
        "tags": ["VBA"],
        "url": "http://localhost:4000/vba/open-part-from-userform/",
        "teaser": null
      },{
        "title": "VBA Userforms - Open new Assembly and Drawing document",
        "excerpt":"In this post, we learn how can we Open new Assembly and Drawing document from a Visual Basic for Application’s Userform.   For this please we need to do following steps as described below.   Video of Code on YouTube   Please see below video how visually we Open new Assembly and Drawing document in Solidworks VBA macro Userform.        Please note that there are no explanation in the video.   Explanation of each line and why we write code this way is given in this post.   Create a new macro   1st we need to create a new macro in Solidworks 3D CAD Software.   If you don’t know how to create a new macro in Solidworks, please go to VBA in Solidworks post for this.   This will open a new macro in Visual Basic Editor with some code as shown in below image.      Insert userform in the macro   After this we need to insert a userform in our macro.   For this, select the button shown in below image.      This button is called insert userform.   As the name suggest, function of this button is inserting a userform.      Please note that in a macro we can insert any number of userform as we like. But for this example we insert only 1 userform.    After clicking the insert userform button we get the userform window.   Adding Controls into Userform   Now in our userform window, we add following controls:           A ComboBox            A CommandButton       Adding ComboBox   You can find ComboBox option, as highlighted in Red Square in below image.      After adding ComboBox, we get window as shown in below image.      Adding CommandButton   You can find CommandButton option, as highlighted in Red Square in below image.      After adding CommandButton, we get window as shown in below image.      Updating Properties   Now we update some properties of following:           UserForm            ComboBox            CommandButton       Updating Properties of the UserForm   We update following properties of the Userform:           Name of Userform            Caption of Userform       In below image, I have shown the properties of Userform1 and update the properties:      Update the value of Name property from UserForm1 to OpenDocumentWindow.      From Name property, we access the Userform.   Update the value of Caption property from UserForm1 to Open Document.      From Caption property, we update the text appears in the window of our Userform.      Please note that it is not necessary to update properties but it is a good habit to update them for our purpose.    Updating Properties of the ComboBox   Now, we update following property of the ComboBox:      Name of ComboBox   In below image, I have shown the properties of ComboBox1 and update the properties:      Update the value of Name property from ComboBox1 to DocumentTypeComboBox.      From Name property, we access the ComboBox.   Updating Properties of the Command Button   Now, we update following property of the Command Button:           Name of Command Button            Caption of Command Button       In below image, I have shown the properties of CommandButton1 and update the properties:      Update the value of Name property from CommandButton1 to OpenDocumentButton.      From Name property, we access the Command Button.    Update the value of Caption property from CommandButton1 to Open Selected Document.      From Caption property, we update the text appears in the Command Button of our Userform.    Calling UserForm in Main Module   Now, we need to call the our Userform inside main module.   For this goto main Sub procedure inside the main Module.   Code inside the main Module is as given below.   Dim swApp As Object Sub main()  Set swApp = Application.SldWorks End Sub  To call our Userform, replace above code with below code:   ' Main function of our VBA program Sub main()   ' Calling our window to show   OpenDocumentWindow.Show End Sub  Above function call our window to appears on screen.   When the window appears on screen, we 1st select the document we want to open and then hit the button to open selected document.   Adding Document list   Before anything we need to add a list of documents inside our combobox.   From this list, we select the document which we want to open.   In this post, we are listing only “Assembly” and “Drawing” documents.   For “Part” document, I will give you a simple exercise.   To add documents list inside our combobox, we 1st need to go in Code Window of userform.   For this, we need to right click on userform and select “View Code” option.   Please see below image for “how to open code window of userform”.      After selecting “View Code” a Code window appears, which is shown in below image.      Now before adding document list we need to understand one important thing!!!   We want to add document list, when we load our Userform.   For this we need to create an Initialize Function.   Below Code is that Initialize Function which load document lists in our combobox.   ' Call when user load Private Sub UserForm_Initialize()   ' Adding items in Combo Box and also set index to '0'   ' '0' index means by default we can see \"Assembly Document\" as already filled   With DocumentTypeComboBox     .AddItem \"Assembly Document\"    ' Adding Assembly Document in Combo Box     .AddItem \"Drawing Document\"     ' Adding Drawing Document in Combo Box     .ListIndex = 0                  ' Select list index for default value to show in combobox   End With End Sub   Now, above code is fully commented and self explanatory hence I will not explain it.   First Test of Macro   After writing code sample in previous section, we will test if every thing is working correct?   By working correct means:           When we Run macro, is Open Document window appears or not?            If window appears, then combobox has documents listed in it?            If both item listed, then “Assembly document” is showing as pre-filled value or not?            Since we have not given any functionality to “Open Document” button, hence it should not any done anything when clicking!!!       For testing all the above points we need to Run the macro as shown in below image.      After running the window we got a window as shown in below image.      Please do check if your macro is running perfectly till now or not!   If not, then I suggest you to read this article again.   Add Functionality to Open NewPart Button   To add functionality in our Open Selected Button, just double click the Open NewPart Button.   This will add give some code behind the designer and opens the code window of Userform designer.   Private Sub OpenDocumentButton_Click()  End Sub   We need to update this code for opening new part after clicking the button.   For this replace all above code with below code.   Option Explicit  ' Creating variable for Solidworks application Dim swApp As SldWorks.SldWorks ' Creating variable for Solidworks document Dim swDoc As SldWorks.ModelDoc2  ' Private function of Open New Part Button  Private Sub OpenDocumentButton_Click()    ' Setting Solidworks variable to Solidworks application   Set swApp = Application.SldWorks      ' Creating string type variable for storing default Assembly location   Dim defaultTemplate As String      If DocumentTypeComboBox.Value = \"Assembly Document\" Then     ' Setting value of this string type variable to \"Default Assembly template\"     defaultTemplate = swApp.GetUserPreferenceStringValue(swUserPreferenceStringValue_e.swDefaultTemplateAssembly)   Else     ' Setting value of this string type variable to \"Default drawing template\" without define paper size     defaultTemplate = swApp.GetUserPreferenceStringValue(swUserPreferenceStringValue_e.swDefaultTemplateDrawing)   End If    ' Setting Solidworks document to new Assembly document   Set swDoc = swApp.NewDocument(defaultTemplate, 0, 0, 0)      ' Hiding the Window after opening the selected document   OpenDocumentWindow.Hide      ' Reset the Index of Combo Box to \"0\" again   DocumentTypeComboBox.ListIndex = 0      End Sub   Now I have added codes in 2 parts.   In 1st part I added below code lines at top of the code window.   Option Explicit  ' Creating variable for Solidworks application Dim swApp As SldWorks.SldWorks ' Creating variable for Solidworks document Dim swDoc As SldWorks.ModelDoc2   Please see below image for more reference.      In 2nd part I added OpenDocumentButton_Click function in the code window as shown in below image.      I have already explained code inside OpenDocumentButton_Click function in Open Assembly and Drawing document.   But here, I have added a condition which is shown in Red colored box in below image.      Basically, this condition stated that, if we select “Assembly Document” in combobox, then by clicking “Open Select Document” button our macro open “Assembly” document in Solidworks.   Otherwise, it will always open “Drawing” document in Solidworks.   The above code will open New part document when we click the button.   Run the macro, and check wheather our macro is working correct document or not!!   If not, send your macro and I will guide you in doing it correctly!   Exercise to do   For those who wants to do more I have an exercise!!           Add “Part Document” in ComboBox list.            Make “Part Document” as pre-filled value in ComboBox.            Change the conditional statement, so that it can handle all 3 conditions!!       Send me the Code of macro in my below e-mail and I will verify it.   That’s it for now.   Hope you learn some use of Userforms and by this post you can get the idea how they works.   I will provide more tutorials on using of Userform time to time.   Till then do come to visit this blog and Happy learning!!!   ","categories": [],
        "tags": ["VBA"],
        "url": "http://localhost:4000/vba/open-assembly-and-drawing-from-userform/",
        "teaser": null
      },{
        "title": "VBA Userforms - Testing Open new Assembly and Drawing document",
        "excerpt":"Content   This post is divided into below sections:           Introduction            Code block to check            Apply check            Cause of Error       Feel free to select the section you want to go!     Introduction   In this post, we test our Open new Assembly and Drawing document code sample.   This post is supplement of VBA Userforms - Open new Assembly and Drawing document post.      Please visit above post before this post.    From VBA Userforms - Open new Assembly and Drawing document post we expect following results :           Open Assembly document when we select “Assembly document”.            Open Drawing document when we select “Drawing document”.       When we run our VBA macro we get the expected result.   Now, as a developer, we want to give a thoroughly tested macro/application to our users.   For testing our VBA macro, we apply some checks so that macro perform same at all machine.     Code block to check   Below is code block where we want to apply our check.   Option Explicit  ' Creating variable for Solidworks application Dim swApp As SldWorks.SldWorks ' Creating variable for Solidworks document Dim swDoc As SldWorks.ModelDoc2  ' Private function of Open New Part Button  Private Sub OpenDocumentButton_Click()    ' Setting Solidworks variable to Solidworks application   Set swApp = Application.SldWorks      ' Creating string type variable for storing default Assembly location   Dim defaultTemplate As String      If DocumentTypeComboBox.Value = \"Assembly Document\" Then     ' Setting value of this string type variable to \"Default Assembly template\"     defaultTemplate = swApp.GetUserPreferenceStringValue(swUserPreferenceStringValue_e.swDefaultTemplateAssembly)   Else     ' Setting value of this string type variable to \"Default drawing template\" without define paper size     defaultTemplate = swApp.GetUserPreferenceStringValue(swUserPreferenceStringValue_e.swDefaultTemplateDrawing)   End If    ' Setting Solidworks document to new Assembly document   Set swDoc = swApp.NewDocument(defaultTemplate, 0, 0, 0)      ' Hiding the Window after opening the selected document   OpenDocumentWindow.Hide      ' Reset the Index of Combo Box to \"0\" again   DocumentTypeComboBox.ListIndex = 0      End Sub     Apply check   In above code there is only one check we apply.   We need to check if get the template value or not.   For this, we need to put an If condition before opening a new document.   Please see below code for condition.   ' Checking if we got template path If defaultTemplate = vbNullString Then     ' If template path is empty then show message and exit from procedure.     MsgBox \"Failed to open \" + DocumentTypeComboBox.Value + \" template.\"     Exit Sub End If   In above code, we check if got the template path or not.   If template path is empty then      we show a message to user as show in below image.   we end our sub procedure from here.      After adding our check, procedure has following code.   ' Private function of Open New Part Button Private Sub OpenDocumentButton_Click()    ' Setting Solidworks variable to Solidworks application   Set swApp = Application.SldWorks      ' Creating string type variable for storing default Assembly location   Dim defaultTemplate As String      If DocumentTypeComboBox.Value = \"Assembly Document\" Then     ' Setting value of this string type variable to \"Default Assembly template\"     defaultTemplate = swApp.GetUserPreferenceStringValue(swUserPreferenceStringValue_e.swDefaultTemplateAssembly)   Else     ' Setting value of this string type variable to \"Default drawing template\" without define paper size     defaultTemplate = swApp.GetUserPreferenceStringValue(swUserPreferenceStringValue_e.swDefaultTemplateDrawing)   End If      ' Checking if we got template path   If defaultTemplate = vbNullString Then     ' If template path is empty then show message and exit from procedure.     MsgBox \"Failed to open \" + DocumentTypeComboBox.Value + \" template.\"     Exit Sub   End If    ' Setting Solidworks document to new Assembly document   Set swDoc = swApp.NewDocument(defaultTemplate, 0, 0, 0)      ' Hiding the Window aft er opening the selected document   OpenDocumentWindow.Hide      ' Reset the Index of Combo Box to \"0\" again   DocumentTypeComboBox.ListIndex = 0      End Sub     Cause of Error   You might wondering how can we have such error?   We have this error, if the value of templates path is not set in option setting.   For reference please see below image.      As you can see, in my machine these value are already set.   But they are empty in case of fresh installation.   Hence if someone runs this macro on fresh SOLIDWORKS copy, they might get error message which we give.     This is it !!!   I hope this be will helpful to someone!   If you found anything to add or update, please let me know on my e-mail which is given in bottom.   this post helps us to test our Open new Assembly and Drawing document macro.   We will see this type of testing of all our macros which we in this website.   If you like the post then please share it with your friends also.   Do let me know by you like this post or not!   Till then, Happy learning!!!  ","categories": [],
        "tags": ["VBA Macro Testing"],
        "url": "http://localhost:4000/vba/testing-open-assembly-and-drawing-document-macro/",
        "teaser": null
      },{
        "title": "VBA Userforms - Browse SOLIDWORKS file(s)",
        "excerpt":"Content   This post is divided into below sections:           Introduction            Creating Userform            Adding Controls into Userform            Updating Properties            Call UserForm in Main Module            Add Functionality to Button            Method 1 - From SldWorks object directly            Method 2 - From Microsoft Excel externally            Final words       Feel free to select the section you want to go!     Introduction   In this article, we learn how to browse SOLIDWORKS file(s) from a SOLIDWORKS VBA Userform.   In this article, I explain about 2 different methods which are listed below.           From SldWorks object directly.            From Microsoft Excel externally.       Methods from these objects are updated methods, hence use any one of them for browsing SOLIDWORKS file(s).      Creating Userform   1st we need to create a new macro in SOLIDWORKS.   If you don’t know how to create a new macro in Solidworks, please go to VBA in Solidworks post for this.   This opens a Visual Basic Editor with some code as shown in below image.      After this we need to insert a userform in our macro.   For this, select the button shown in below image.      This button is called insert userform.   As the name suggest, function of this button is inserting a userform.      Please note that in a macro we can insert any number of userform as we like. But for this example we insert only 1 userform.    After clicking the insert userform button we get the userform window as shown in above image.     Adding Controls into Userform   Now in our userform window, we add following controls:           A TextBox            A CommandButton       Adding ComboBox   You can find TextBox option, as highlighted in Red Square in below image.      After adding ComboBox, we get window as shown in below image.      Adding CommandButton   You can find CommandButton option, as highlighted in Red Square in below image.      After adding CommandButton, we get window as shown in below image.        Updating Properties   Now we update some properties of following:           Userform            TextBox            CommandButton       Update Userform Properties   We update following properties of the Userform:           Name of Userform            Caption of Userform       In below image, I have shown the properties of Userform1 and update the properties:      Update the value of Name property from UserForm1 to BrowseDocumentWindow.      From Name property, we access the Userform.   Update the value of Caption property from UserForm1 to Browse Document.      From Caption property, we update the text appears in the window of our Userform.      Please note that it is not necessary to update properties but it is a good habit to update them for our purpose.    Update TextBox Properties   We update following property of the TextBox:      Name of TextBox   In below image, I have shown the properties of TextBox and update the properties:      Update the value of Name property from TextBox to SelectedFileTextBox.      From Name property, we access the TextBox properties like Text we want to show.   Update CommandButton Properties   We update following properties of the Command Button:           Name of Command Button            Caption of Command Button       In below image, I have shown the properties of CommandButton1 and update the properties:      Update the value of Name property from CommandButton1 to BrowseDocumentButton.      From Name property, we access the Command Button.    Update the value of Caption property from CommandButton1 to Browse SOLIDOWRKS File(s).      From Caption property, we update the text appears in the Command Button of our Userform.      Call UserForm in Main Module   Now, we need to call the our Userform inside main module.   For this goto main Sub procedure inside the main Module.   Code inside the main Module is as given below.   Dim swApp As Object Sub main()  Set swApp = Application.SldWorks End Sub  To call our Userform, replace above code with below code:   ' Main function of our VBA program Sub main()   ' Calling our window to show   BrowseDocumentWindow.Show End Sub  Above function call our window to appears on screen.   When the window appears on screen, we hit the Browse button to browse SOLIDWORKS File(s).     Add Functionality to Button   To add functionality in our BrowseDocumentButton, just double click the button.   This will add some code behind the designer.   Now open the code window of Userform designer.   Private Sub CommandButton1_Click()  End Sub   We need to update this code for opening new part after clicking the button.   Method 1 - From SldWorks object directly   For this replace all above code with below code.   Option Explicit  ' Creating variable for Solidworks application Dim swApp As SldWorks.SldWorks  ' Private function of Open New Part Button Private Sub BrowseDocumentButton_Click()    ' Setting Solidworks variable to Solidworks application   Set swApp = Application.SldWorks      ' Solidworks file filter string   Dim swFilter As String      ' Method parameters   Dim fileName As String   Dim fileConfig As String   Dim fileDispName As String   Dim fileOptions As Long    ' Set filters for different Solidworks files.   swFilter = \"SOLIDWORKS Files (*.sldprt; *.sldasm; *.slddrw)|*.sldprt;*.sldasm;*.slddrw\"      ' Browse and get the Selected file name   fileName = swApp.GetOpenFileName(\"Browse Document\", \"\", swFilter, fileOptions, fileConfig, fileDispName)    ' Show the selected file's full path in text box   SelectedFileTextBox.Text = fileName      End Sub     Understanding Method 1   Now let us walk through each line in the above code, and understand the meaning and purpose of every line.   I also give some link so that you can go through them if there are anything I explained in previous posts.   Option Explicit   This line forces us to define every variable we are going to use.   For more information please visit Solidworks Macros - Open new Part document post.   ' Create variable for Solidworks application Dim swApp As SldWorks.SldWorks   In this line, we create a variable which we named as swApp and the type of this swApp variable is SldWorks.SldWorks.   Next is our button click event BrowseDocumentButton_Click procedure.   This procedure hold all the statements (instructions) we give to computer.   ' Set Solidworks variable to Solidworks application Set swApp = Application.SldWorks   In this line, we set the value of our Solidworks variable swApp; which we define earlier; to Solidworks application.   ' Solidworks file filter string Dim swFilter As String  ' Method parameters Dim fileName As String Dim fileConfig As String Dim fileDispName As String Dim fileOptions As Long   In above lines of code, we create SOLIDWORKS files filter string and Method parameters.   ' Set filters for different Solidworks files. Filter = \"SOLIDWORKS Files (*.sldprt; *.sldasm; *.slddrw)|*.sldprt;*.sldasm;*.slddrw\"   In above line of code, we set filters for different SOLIDWORKS files.   ' Browse and get the Selected file name fileName = swApp.GetOpenFileName(\"Browse Document\", \"\", swFilter, fileOptions, fileConfig, fileDispName)   For “Browse and get the Selected file name”, we use GetOpenFileName method from Solidworks SldWorks object.   This GetOpenFileName method takes following parameters as explained:           DialogTitle : Title of the dialog.            InitialFileName : Path and file name of the file to open.            FileFilter : File name extension of the file to open.            OpenOptions : Not used.            ConfigName : Name of the configuration.            DisplayName : Recommended file name to use.       After the function complete following are the results:   Return Value:      Path and file name of the file to open.   Below image shows our form in SOLIDWORKS.      Below image shows the opened window.      ' Show the selected file's full path in text box SelectedFileTextBox.Text = fileName   Now we set the value of text box to browsed file name.   Final window of method 1 is shown below/.        Method 2 - From Microsoft Excel externally   Prerequisite:           Office 365            Following below steps carefully       For this method we need to use Microsoft Excel from SOLIDWORKS.   For using Microsoft Excel, we need to add reference files.   Please see following steps for adding reference files:      Select reference option as shown in below image.         This open Reference window as shown in below image.         Now select option given in below images and Press OK after selecting files..      Now, replace code in Add Functionality to Button with below code sample.   Option Explicit  ' Private function of Open New Part Button Private Sub BrowseDocumentButton_Click()        ' Excel object   Dim xlObj As Object      ' File dialog object   Dim fDialog As Object      ' File name sting   Dim strFile As String      ' Create Excel object   Set xlObj = CreateObject(\"Excel.Application\")      ' Create File dialog object by setting option 3   Set fDialog = xlObj.FileDialog(3)      ' Setting different properties of file dialog   With fDialog     .Title = \"Browse Document\"  ' Title of window     .AllowMultiSelect = True    ' Allowing multiple select     .Filters.Clear              ' Clear the filters     .Filters.Add \"SOLIDWORKS Files\", \"*.sldprt; *.sldasm; *.slddrw\"       ' Add filters for Solidworks files       If .Show Then         strFile = .SelectedItems(1)       Else         strFile = vbNullString       End If   End With        ' Show the selected file's full path in text box   SelectedFileTextBox.Text = strFile      End Sub     Understanding Method 2   Now let us walk through each line in the above code, and understand the meaning and purpose of every line.   I also give some link so that you can go through them if there are anything I explained in previous posts.   Option Explicit   This line forces us to define every variable we are going to use.   For more information please visit Solidworks Macros - Open new Part document post.   Next is our button click event BrowseDocumentButton_Click procedure.   This procedure hold all the statements (instructions) we give to computer.   ' Excel object Dim xlObj As Object   In this line, we create object for Microsoft Excel Application.   ' File dialog object Dim fDialog As Object  ' File name sting Dim strFile As String   In above lines of code, we create objects for File Dialog and string for file name.   ' Create Excel object Set xlObj = CreateObject(\"Excel.Application\")   In above line of code, we create Microsoft Excel Application and set the value of excel object.   ' Create File dialog object by setting option 3 Set fDialog = xlObj.FileDialog(3)   In above line of code, we create File dialog and set the value of file dialog by FileDialog method.   FileDialog method take 1 parameter enum. Please see below links for more details about FileDialog   Application.FileDialog property (Excel)   MsoFileDialogType enumeration (Office)   ' Setting different properties of file dialog With fDialog   .Title = \"Browse Document\"  ' Title of window   .AllowMultiSelect = True    ' Allowing multiple select   .Filters.Clear              ' Clear the filters   .Filters.Add \"SOLIDWORKS Files\", \"*.sldprt; *.sldasm; *.slddrw\"       ' Add filters for Solidworks files     If .Show Then       strFile = .SelectedItems(1)     ' Select 3rd item from list     Else       strFile = vbNullString     End If End With   In above code we set different properties of File dialog object.           Title : Title of the dialog.            AllowMultiSelect : Allowing multi select of files.            FileFilter : File name extension of the file to open.       If statement shows that, if file dialog is shown then assign the first value to file name string object.   After the function complete following are the results:   Return Value:      Path and file name of the selected file(s).   Below image shows our form in SOLIDWORKS.      Below image shows the opened window.      Below image shows the multi-selection in opened window.      ' Show the selected file's full path in text box SelectedFileTextBox.Text = fileName   Now we set the value of text box to browsed file name.   Final window of method 1 is shown below/.      Final window of both method is same.     Final words   This is it !!!   I hope my efforts will helpful to someone!   If you found anything to add or update, please let me know on my e-mail.   Hope this post helps you in Browsing SOLIDWORKS file(s) with Solidworks VBA Macros.   For more such tutorials on Solidworks VBA Macro, do come to this blog after sometime.   If you like the post then please share it with your friends also.   Do let me know by you like this post or not!   Till then, Happy learning!!!  ","categories": [],
        "tags": ["VBA"],
        "url": "http://localhost:4000/vba/browse-solidworks-file/",
        "teaser": null
      }]
